name: Dependency Security & Management

on:
  push:
    branches: [main, develop]
    paths:
      - 'pyproject.toml'
      - 'requirements*.txt'
      - '.github/workflows/dependency-check.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'pyproject.toml'
      - 'requirements*.txt'
  schedule:
    # Run weekly security scan on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  PIP_CACHE_DIR: ~/.cache/pip

jobs:
  # ============================================
  # Dependency Version Pinning Check
  # ============================================
  version-pinning:
    name: Check Version Pinning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tomli
      
      - name: Check for unpinned dependencies
        run: |
          python scripts/pin_dependencies.py pin
      
      - name: Verify lock files exist
        run: |
          if [ ! -f "requirements-lock.txt" ]; then
            echo "ERROR: requirements-lock.txt not found"
            exit 1
          fi
          if [ ! -f "requirements-dev-lock.txt" ]; then
            echo "ERROR: requirements-dev-lock.txt not found"
            exit 1
          fi
          echo "‚úÖ Lock files present"

  # ============================================
  # Security Vulnerability Scanning
  # ============================================
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: ${{ runner.os }}-pip-security-${{ hashFiles('requirements-lock.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-security-
      
      - name: Install production dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-lock.txt
      
      - name: Install security tools
        run: |
          pip install safety bandit pip-audit
      
      - name: Run Safety security scan
        run: |
          safety check --json --output safety-report.json || true
          if [ -f safety-report.json ]; then
            echo "## Safety Security Report" >> $GITHUB_STEP_SUMMARY
            python -c "
import json
with open('safety-report.json') as f:
    data = json.load(f)
    vulns = data.get('vulnerabilities', [])
    if vulns:
        print(f'‚ö†Ô∏è Found {len(vulns)} vulnerabilities')
        for v in vulns[:10]:
            print(f\"- {v.get('package_name', 'unknown')}: {v.get('advisory', 'No details')}\")
    else:
        print('‚úÖ No vulnerabilities found')
            " >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Run pip-audit scan
        run: |
          pip-audit --desc --format json --output pip-audit-report.json || true
          if [ -f pip-audit-report.json ]; then
            echo "## Pip Audit Report" >> $GITHUB_STEP_SUMMARY
            python -c "
import json
with open('pip-audit-report.json') as f:
    data = json.load(f)
    vulns = data.get('vulnerabilities', [])
    if vulns:
        print(f'‚ö†Ô∏è Found {len(vulns)} vulnerabilities')
        for v in vulns[:10]:
            print(f\"- {v.get('name', 'unknown')}: {v.get('description', 'No details')}\")
    else:
        print('‚úÖ No vulnerabilities found')
            " >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Run Bandit security linter
        run: |
          bandit -r app -f json -o bandit-report.json --severity-level medium || true
          if [ -f bandit-report.json ]; then
            echo "## Bandit Security Report" >> $GITHUB_STEP_SUMMARY
            python -c "
import json
with open('bandit-report.json') as f:
    data = json.load(f)
    issues = data.get('results', [])
    if issues:
        print(f'‚ö†Ô∏è Found {len(issues)} security issues')
        for issue in issues[:5]:
            print(f\"- {issue.get('issue_text', 'Unknown issue')} [{issue.get('issue_severity', 'unknown')}]\")
    else:
        print('‚úÖ No security issues found')
            " >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            safety-report.json
            pip-audit-report.json
            bandit-report.json

  # ============================================
  # License Compliance Check
  # ============================================
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install license checker
        run: |
          python -m pip install --upgrade pip
          pip install pip-licenses
      
      - name: Check licenses
        run: |
          pip-licenses --format=json --output-file=licenses.json
          echo "## License Report" >> $GITHUB_STEP_SUMMARY
          python -c "
import json
with open('licenses.json') as f:
    licenses = json.load(f)
    # Check for problematic licenses
    problematic = ['GPL', 'AGPL', 'LGPL', 'SSPL']
    issues = []
    for pkg in licenses:
        license_name = pkg.get('License', '')
        if any(prob in license_name for prob in problematic):
            issues.append(f\"{pkg.get('Name')}: {license_name}\")
    
    if issues:
        print(f'‚ö†Ô∏è Found {len(issues)} packages with restrictive licenses:')
        for issue in issues:
            print(f'  - {issue}')
    else:
        print('‚úÖ All licenses are compatible')
          " >> $GITHUB_STEP_SUMMARY
      
      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.json

  # ============================================
  # Dependency Update Check
  # ============================================
  outdated-check:
    name: Check Outdated Dependencies
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-lock.txt
      
      - name: Check for outdated packages
        run: |
          pip list --outdated --format=json > outdated.json
          echo "## Outdated Packages Report" >> $GITHUB_STEP_SUMMARY
          python -c "
import json
with open('outdated.json') as f:
    packages = json.load(f)
    if packages:
        print(f'üì¶ Found {len(packages)} outdated packages:')
        for pkg in packages[:20]:
            print(f\"  - {pkg['name']}: {pkg['version']} ‚Üí {pkg['latest_version']}\")
        if len(packages) > 20:
            print(f'  ... and {len(packages) - 20} more')
    else:
        print('‚úÖ All packages are up to date')
          " >> $GITHUB_STEP_SUMMARY
      
      - name: Create issue for outdated packages
        if: github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const outdated = JSON.parse(fs.readFileSync('outdated.json', 'utf8'));
            
            if (outdated.length > 0) {
              const issueBody = `## Weekly Dependency Update Report
              
              Found ${outdated.length} outdated packages that may need updating:
              
              ${outdated.slice(0, 20).map(pkg => 
                `- **${pkg.name}**: ${pkg.version} ‚Üí ${pkg.latest_version}`
              ).join('\n')}
              ${outdated.length > 20 ? `\n... and ${outdated.length - 20} more` : ''}
              
              ### Action Required
              1. Review the outdated packages
              2. Test compatibility with new versions
              3. Update pyproject.toml with new pinned versions
              4. Regenerate lock files
              
              Run \`python scripts/pin_dependencies.py check\` for a full report.`;
              
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `[Dependencies] ${outdated.length} packages need updating`,
                body: issueBody,
                labels: ['dependencies', 'maintenance']
              });
            }

  # ============================================
  # Virtual Environment Check
  # ============================================
  virtualenv-check:
    name: No Virtual Environments
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check for virtual environment directories
        run: |
          VENV_DIRS=$(find . -type d \( \
            -name "venv" -o \
            -name "env" -o \
            -name ".venv" -o \
            -name ".env" -o \
            -name "virtualenv" -o \
            -name "pyenv" -o \
            -name ".pyenv" -o \
            -name "__pycache__" -o \
            -name ".pytest_cache" -o \
            -name ".mypy_cache" \
          \) -not -path "./.git/*" | head -20)
          
          if [ -n "$VENV_DIRS" ]; then
            echo "‚ùå Found virtual environment directories in repository:"
            echo "$VENV_DIRS"
            exit 1
          else
            echo "‚úÖ No virtual environment directories found"
          fi
      
      - name: Check for Python cache files
        run: |
          CACHE_FILES=$(find . -type f \( \
            -name "*.pyc" -o \
            -name "*.pyo" -o \
            -name "*.pyd" -o \
            -name ".Python" \
          \) -not -path "./.git/*" | head -20)
          
          if [ -n "$CACHE_FILES" ]; then
            echo "‚ùå Found Python cache files in repository:"
            echo "$CACHE_FILES"
            exit 1
          else
            echo "‚úÖ No Python cache files found"
          fi

  # ============================================
  # Dependency Reproducibility Test
  # ============================================
  reproducibility-test:
    name: Test Dependency Installation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Test lock file installation
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-lock.txt
          echo "‚úÖ Successfully installed all dependencies on Python ${{ matrix.python-version }}"
      
      - name: Verify key packages
        run: |
          python -c "
import sys
print(f'Python: {sys.version}')
import fastapi; print(f'FastAPI: {fastapi.__version__}')
import pydantic; print(f'Pydantic: {pydantic.version.VERSION}')
import redis; print(f'Redis: {redis.__version__}')
import agno; print(f'Agno: {agno.__version__}')
import structlog; print(f'Structlog: {structlog.__version__}')
          "

  # ============================================
  # Summary Report
  # ============================================
  dependency-gate:
    name: Dependency Quality Gate
    runs-on: ubuntu-latest
    needs: [version-pinning, security-scan, license-check, virtualenv-check, reproducibility-test]
    if: always()
    steps:
      - name: Check gate status
        run: |
          echo "## Dependency Management Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check each job result
          if [ "${{ needs.version-pinning.result }}" == "success" ]; then
            echo "‚úÖ Version Pinning: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Version Pinning: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.security-scan.result }}" == "success" ]; then
            echo "‚úÖ Security Scan: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Security Scan: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.license-check.result }}" == "success" ]; then
            echo "‚úÖ License Compliance: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå License Compliance: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.virtualenv-check.result }}" == "success" ]; then
            echo "‚úÖ Virtual Environment Check: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Virtual Environment Check: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.reproducibility-test.result }}" == "success" ]; then
            echo "‚úÖ Reproducibility Test: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Reproducibility Test: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Fail if any critical check failed
          if [ "${{ needs.version-pinning.result }}" != "success" ] || \
             [ "${{ needs.virtualenv-check.result }}" != "success" ] || \
             [ "${{ needs.reproducibility-test.result }}" != "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚õî Critical dependency checks failed. PR cannot be merged." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ All dependency checks passed!" >> $GITHUB_STEP_SUMMARY