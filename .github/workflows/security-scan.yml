name: Security Scanning Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run daily security scan at 2 AM UTC
    - cron: "0 2 * * *"

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  secret-scanning:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better detection

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Detect Secrets
        uses: reviewdog/action-detect-secrets@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          fail_on_error: true

  dependency-scanning:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install safety bandit pip-audit

      - name: Run Safety check
        run: safety check --json --continue-on-error

      - name: Run pip-audit
        run: pip-audit --desc --format json

      - name: Run Bandit security linter
        run: bandit -r app/ -f json -o bandit-report.json

      - name: Upload Bandit results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: bandit-report.json

  sast-analysis:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python, javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/python
            p/javascript

  container-scanning:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'docker') || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run Hadolint for Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: warning

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: FOSSA License Scan
        uses: fossas/fossa-action@main
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}

      - name: License Finder
        run: |
          pip install pip-licenses
          pip-licenses --format=json --with-license-file --output-file=licenses.json

  infrastructure-scan:
    name: Infrastructure as Code Security
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'terraform') || contains(github.event.head_commit.message, 'pulumi')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkov Security Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          quiet: false
          soft_fail: false
          framework: all
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: checkov-results.sarif

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [secret-scanning, dependency-scanning, sast-analysis]
    if: always()
    steps:
      - name: Generate consolidated report
        run: |
          echo "## üîí Security Scan Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "- Secret Scanning: ${{ needs.secret-scanning.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Dependency Scanning: ${{ needs.dependency-scanning.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- SAST Analysis: ${{ needs.sast-analysis.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review any security findings in the Security tab" >> $GITHUB_STEP_SUMMARY
          echo "2. Address critical and high severity issues immediately" >> $GITHUB_STEP_SUMMARY
          echo "3. Update dependencies with known vulnerabilities" >> $GITHUB_STEP_SUMMARY

      - name: Notify Slack on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: "‚ö†Ô∏è Security scan failed! Check the workflow for details."
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # InfraOpsSwarm Integration
  swarm-security-validation:
    name: InfraOpsSwarm Security Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Trigger InfraOpsSwarm Security Scan
        run: |
          curl -X POST http://api.sophia-intel.ai/api/infrastructure/execute \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.SWARM_API_TOKEN }}" \
            -d '{
              "type": "security_scan",
              "description": "PR Security Validation",
              "context": {
                "pr_number": "${{ github.event.pull_request.number }}",
                "branch": "${{ github.head_ref }}",
                "scope": "changed_files"
              },
              "require_approval": false,
              "priority": 9
            }'
