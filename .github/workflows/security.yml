name: security-checks

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  gitleaks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        with:
          args: detect --source . --no-git -v

  safety:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: python -m pip install --upgrade pip
      - run: pip install safety
      - name: Safety check (root requirements if present)
        run: |
          if [ -f requirements.txt ]; then safety check -r requirements.txt || true; fi
      - name: Safety check (pyproject deps)
        run: |
          pip install . || true
          safety check || true

  bandit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: pip install bandit[toml]
      - name: Run Bandit security linter
        run: bandit -r . -f json -o bandit-report.json || true
      - name: Check for critical security issues
        run: |
          if [ -f bandit-report.json ]; then
            # Fail if critical issues found
            critical=$(jq '.results[] | select(.issue_severity == "HIGH")' bandit-report.json | wc -l)
            if [ "$critical" -gt 0 ]; then
              echo "❌ $critical critical security issues found"
              jq '.results[] | select(.issue_severity == "HIGH")' bandit-report.json
              exit 1
            else
              echo "✅ No critical security issues found"
            fi
          fi

  trivy-fs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-results.json'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'  # Don't fail build, just report
      - name: Check Trivy results
        run: |
          if [ -f trivy-results.json ]; then
            # Count critical/high vulnerabilities
            critical_high=$(jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL" or .Severity == "HIGH") | .VulnerabilityID' trivy-results.json 2>/dev/null | wc -l)
            if [ "$critical_high" -gt 0 ]; then
              echo "⚠️ Found $critical_high critical/high vulnerabilities"
            else
              echo "✅ No critical/high vulnerabilities found"
            fi
          fi

  secret-patterns:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check for hardcoded secrets patterns
        run: |
          # Check for common secret patterns
          exit_code=0
          
          # API keys
          if grep -r "pk_live_" --exclude-dir=.git . 2>/dev/null; then
            echo "❌ Hardcoded API keys found!"
            exit_code=1
          fi
          
          # Tokens
          if grep -r "xoxb-" --exclude-dir=.git --exclude-dir=examples . 2>/dev/null; then
            echo "❌ Hardcoded Slack tokens found!"
            exit_code=1
          fi
          
          # Private keys (not in examples)
          if grep -r "BEGIN PRIVATE KEY" --exclude-dir=.git --exclude-dir=examples . 2>/dev/null; then
            echo "❌ Private keys found!"
            exit_code=1
          fi
          
          # Database URLs with credentials
          if grep -r "://.*:.*@" --exclude-dir=.git --exclude="*.example" --exclude="env.example" . 2>/dev/null; then
            echo "⚠️ Potential database URLs with credentials found"
          fi
          
          if [ $exit_code -eq 0 ]; then
            echo "✅ No obvious hardcoded secrets found"
          fi
          
          exit $exit_code

  mcp-validation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Validate MCP server JWT requirements
        run: |
          # Check that all MCP servers require JWT secrets
          missing_validation=0
          
          for server in mcp/filesystem/server.py mcp/memory_server.py mcp/git/server.py mcp/vector/server.py; do
            if [ -f "$server" ]; then
              if ! grep -q "MCP_JWT_SECRET required for production" "$server"; then
                echo "❌ $server missing JWT validation"
                missing_validation=1
              else
                echo "✅ $server has JWT validation"
              fi
            fi
          done
          
          # Check env.example has JWT but no legacy tokens
          if grep -q "MCP_TOKEN=" env.example; then
            echo "❌ env.example still contains legacy MCP_TOKEN"
            missing_validation=1
          elif grep -q "MCP_JWT_SECRET=" env.example; then
            echo "✅ env.example uses JWT-only authentication"
          else
            echo "❌ env.example missing MCP_JWT_SECRET"
            missing_validation=1
          fi
          
          if [ $missing_validation -eq 1 ]; then
            echo "❌ MCP JWT validation failed"
            exit 1
          else
            echo "✅ All MCP servers properly configured for JWT"
          fi
