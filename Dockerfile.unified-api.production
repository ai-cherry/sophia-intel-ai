# Production Dockerfile for Unified API Service - Fly.io Optimized
# Based on existing Dockerfile.unified-api with production optimizations

FROM python:3.11-slim AS builder

# Build arguments
ARG BUILDPLATFORM
ARG TARGETPLATFORM

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# Create working directory
WORKDIR /app

# Copy requirements files
COPY requirements.txt ./
COPY app/requirements.txt ./app/
COPY pulumi/requirements.txt ./pulumi/

# Install Python dependencies in optimized way
RUN pip install --upgrade pip wheel setuptools && \
    pip install --no-cache-dir -r requirements.txt && \
    pip install --no-cache-dir -r app/requirements.txt && \
    pip install --no-cache-dir -r pulumi/requirements.txt

# Install additional production dependencies
RUN pip install --no-cache-dir \
    fastapi[all]==0.104.1 \
    uvicorn[standard]==0.24.0 \
    gunicorn==21.2.0 \
    redis[hiredis]==5.0.1 \
    psycopg2-binary==2.9.9 \
    weaviate-client==4.9.3 \
    openai==1.40.0 \
    anthropic==0.25.0 \
    python-dotenv==1.0.0 \
    httpx==0.25.2 \
    sqlalchemy==2.0.23 \
    alembic==1.13.1 \
    prometheus-client==0.19.0

# Production stage
FROM python:3.11-slim AS production

# Set production environment variables
ENV PYTHONPATH=/app \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    LOCAL_DEV_MODE=false \
    PORT=8003 \
    WORKERS=4

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    curl \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user
RUN useradd -m -u 1000 sophia && \
    mkdir -p /app /data /logs && \
    chown -R sophia:sophia /app /data /logs

# Copy Python packages from builder
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Switch to non-root user
USER sophia
WORKDIR /app

# Copy application code
COPY --chown=sophia:sophia app/ ./app/
COPY --chown=sophia:sophia pulumi/ ./pulumi/
COPY --chown=sophia:sophia .env.local ./

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8003/healthz || exit 1

# Expose port
EXPOSE 8003

# Production startup command with gunicorn
CMD ["gunicorn", "app.main:app", \
     "--worker-class", "uvicorn.workers.UvicornWorker", \
     "--workers", "4", \
     "--bind", "0.0.0.0:8003", \
     "--timeout", "120", \
     "--keep-alive", "5", \
     "--max-requests", "1000", \
     "--max-requests-jitter", "100", \
     "--preload", \
     "--access-logfile", "-", \
     "--error-logfile", "-", \
     "--log-level", "info"]