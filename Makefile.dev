# Sophia AI Development Makefile
# Terminal-first multi-agent AI coding environment

.PHONY: help env-check dev-up dev-down dev-logs dev-shell \
        grok-test claude-test deepseek-test codex-test \
        swarm-start swarm-status swarm-logs \
        memory-search memory-index \
        rag-index rag-test \
        mcp-status mcp-test \
        clean clean-all \
        install test lint format \
        docker-build docker-push

# Color output
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[0;33m
BLUE := \033[0;34m
NC := \033[0m # No Color

# Default target
.DEFAULT_GOAL := help

# Variables
COMPOSE_FILE := docker-compose.dev.yml
COMPOSE := docker compose -f $(COMPOSE_FILE)
PYTHON := python3
PIP := pip3
PROJECT_NAME := sophia-intel-ai
ARTEMIS_PATH := ../artemis-cli

###############################
# Help & Information
###############################

help: ## Show this help message
	@echo "$(BLUE)Sophia AI - Terminal-First Multi-Agent Coding Environment$(NC)"
	@echo ""
	@echo "$(YELLOW)Available targets:$(NC)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | \
		awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-20s$(NC) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(YELLOW)Quick Start:$(NC)"
	@echo "  1. Copy .env.template to .env and add your API keys"
	@echo "  2. Run 'make dev-up' to start the environment"
	@echo "  3. Run 'make grok-test' to test Grok integration"
	@echo "  4. Run 'make swarm-start TASK=\"your task\"' to start a swarm"

env-check: ## Check environment configuration and API keys
	@echo "$(BLUE)Checking environment configuration...$(NC)"
	@$(PYTHON) scripts/agents_env_check.py

###############################
# Development Environment
###############################

dev-up: ## Start development environment (Redis, Weaviate, MCP servers)
	@echo "$(BLUE)Starting development environment...$(NC)"
	@$(COMPOSE) up -d
	@echo "$(GREEN)Development environment started!$(NC)"
	@echo "Services available at:"
	@echo "  - Redis:        localhost:6379"
	@echo "  - Weaviate:     localhost:8080"
	@echo "  - MCP Memory:   localhost:8081"
	@echo "  - Web UI:       localhost:3001"

dev-down: ## Stop development environment
	@echo "$(YELLOW)Stopping development environment...$(NC)"
	@$(COMPOSE) down
	@echo "$(GREEN)Development environment stopped.$(NC)"

dev-logs: ## Show logs from all services
	@$(COMPOSE) logs -f

dev-shell: ## Open shell in agent-dev container
	@echo "$(BLUE)Opening development shell...$(NC)"
	@$(COMPOSE) run --rm agent-dev /bin/bash

dev-status: ## Show status of all services
	@echo "$(BLUE)Service Status:$(NC)"
	@$(COMPOSE) ps

###############################
# Agent Testing
###############################

grok-test: ## Test Grok integration (requires XAI_API_KEY)
	@echo "$(BLUE)Testing Grok in Docker...$(NC)"
	@$(COMPOSE) run --rm agent-dev bash -c \
		"pip install -q -r requirements.txt && \
		python3 scripts/sophia.py agent grok \
			--mode code \
			--task 'Create a REST API endpoint for user authentication' \
			--provider xai"

claude-test: ## Test Claude integration (requires ANTHROPIC_API_KEY)
	@echo "$(BLUE)Testing Claude in Docker...$(NC)"
	@$(COMPOSE) run --rm agent-dev bash -c \
		"pip install -q -r requirements.txt && \
		python3 scripts/sophia.py agent claude \
			--mode code \
			--task 'Refactor the main module for better error handling' \
			--provider anthropic"

deepseek-test: ## Test DeepSeek integration (requires DEEPSEEK_API_KEY)
	@echo "$(BLUE)Testing DeepSeek in Docker...$(NC)"
	@$(COMPOSE) run --rm agent-dev bash -c \
		"pip install -q -r requirements.txt && \
		python3 scripts/sophia.py agent deepseek \
			--mode code \
			--task 'Optimize the database query performance' \
			--provider deepseek"

codex-test: ## Test Codex/OpenAI integration (requires OPENAI_API_KEY)
	@echo "$(BLUE)Testing Codex in Docker...$(NC)"
	@$(COMPOSE) run --rm agent-dev bash -c \
		"pip install -q -r requirements.txt && \
		python3 scripts/sophia.py agent codex \
			--mode code \
			--task 'Generate unit tests for the authentication module' \
			--provider openai"

# Quick one-off Grok test without compose network
grok-quick: ## Quick Grok test without full environment
	@echo "$(BLUE)Running quick Grok test...$(NC)"
	@docker run --rm -it \
		-v "$${PWD}":/workspace -w /workspace \
		-e XAI_API_KEY="$${XAI_API_KEY}" \
		python:3.11-slim bash -lc \
		"pip install -q -r requirements.txt && \
		python3 scripts/sophia.py agent grok \
			--mode code \
			--task 'Create REST API' \
			--provider xai"

###############################
# Swarm Coordination
###############################

TASK ?= "Implement a feature"

swarm-start: ## Start a swarm task (use TASK="your task")
	@echo "$(BLUE)Starting swarm for task: $(TASK)$(NC)"
	@$(COMPOSE) run --rm agent-dev bash -c \
		"pip install -q -r requirements.txt && \
		python3 scripts/sophia_cli.py swarm start '$(TASK)' \
			--agents auto \
			--repo both"

swarm-status: ## Show status of active swarms
	@echo "$(BLUE)Active swarms:$(NC)"
	@$(COMPOSE) run --rm agent-dev bash -c \
		"pip install -q -r requirements.txt && \
		python3 scripts/sophia_cli.py swarm status"

swarm-logs: ## Show swarm execution logs
	@$(COMPOSE) logs -f swarm-orchestrator

###############################
# Memory & RAG
###############################

QUERY ?= "authentication"

memory-search: ## Search shared memory (use QUERY="search term")
	@echo "$(BLUE)Searching memory for: $(QUERY)$(NC)"
	@$(COMPOSE) run --rm agent-dev bash -c \
		"pip install -q -r requirements.txt && \
		python3 scripts/sophia_cli.py memory search '$(QUERY)' \
			--namespace default \
			--limit 10"

memory-index: ## Index both repositories into vector memory
	@echo "$(BLUE)Indexing repositories...$(NC)"
	@$(COMPOSE) run --rm agent-dev bash -c \
		"pip install -q -r requirements.txt && \
		python3 scripts/index_repos.py \
			--repos sophia,artemis \
			--vector-store weaviate"

rag-test: ## Test RAG retrieval
	@echo "$(BLUE)Testing RAG retrieval...$(NC)"
	@$(COMPOSE) run --rm agent-dev bash -c \
		"pip install -q -r requirements.txt && \
		python3 scripts/test_rag.py \
			--query 'How does authentication work?' \
			--top-k 5"

###############################
# MCP Servers
###############################

mcp-status: ## Check MCP server status
	@echo "$(BLUE)MCP Server Status:$(NC)"
	@curl -s http://localhost:8081/health | jq '.' || echo "MCP Memory: Not responding"
	@curl -s http://localhost:8082/health | jq '.' || echo "MCP FS Sophia: Not responding"
	@curl -s http://localhost:8083/health | jq '.' || echo "MCP FS Artemis: Not responding"
	@curl -s http://localhost:8084/health | jq '.' || echo "MCP Git: Not responding"

mcp-test: ## Test MCP filesystem operations
	@echo "$(BLUE)Testing MCP operations...$(NC)"
	@$(COMPOSE) run --rm agent-dev bash -c \
		"pip install -q -r requirements.txt && \
		python3 scripts/test_mcp.py"

###############################
# Installation & Setup
###############################

install: ## Install dependencies in container
	@echo "$(BLUE)Installing dependencies...$(NC)"
	@$(COMPOSE) run --rm agent-dev bash -c \
		"pip install -r requirements.txt && \
		pip install -r requirements-dev.txt"

install-host: ## Install dependencies on host (not recommended)
	@echo "$(YELLOW)Installing on host (consider using containers instead)...$(NC)"
	@$(PIP) install -r requirements.txt
	@$(PIP) install -r requirements-dev.txt

###############################
# Testing & Quality
###############################

test: ## Run all tests in container
	@echo "$(BLUE)Running tests...$(NC)"
	@$(COMPOSE) run --rm agent-dev bash -c \
		"pip install -q -r requirements-dev.txt && \
		pytest tests/ -v --cov=packages/sophia_core"

test-unit: ## Run unit tests only
	@$(COMPOSE) run --rm agent-dev bash -c \
		"pytest tests/unit -v"

test-integration: ## Run integration tests
	@$(COMPOSE) run --rm agent-dev bash -c \
		"pytest tests/integration -v"

lint: ## Run linting checks
	@echo "$(BLUE)Running linters...$(NC)"
	@$(COMPOSE) run --rm agent-dev bash -c \
		"pip install -q ruff mypy && \
		ruff check . && \
		mypy packages/sophia_core"

format: ## Format code with black and ruff
	@echo "$(BLUE)Formatting code...$(NC)"
	@$(COMPOSE) run --rm agent-dev bash -c \
		"pip install -q black ruff && \
		black . && \
		ruff format ."

###############################
# Docker Management
###############################

docker-build: ## Build all Docker images
	@echo "$(BLUE)Building Docker images...$(NC)"
	@$(COMPOSE) build

docker-push: ## Push Docker images to registry
	@echo "$(BLUE)Pushing Docker images...$(NC)"
	@echo "$(YELLOW)Not implemented - configure your registry first$(NC)"

###############################
# Cleanup
###############################

clean: ## Clean up containers and networks
	@echo "$(YELLOW)Cleaning up containers...$(NC)"
	@$(COMPOSE) down
	@docker system prune -f
	@echo "$(GREEN)Cleanup complete.$(NC)"

clean-all: ## Clean everything including volumes (WARNING: deletes data)
	@echo "$(RED)WARNING: This will delete all data including Redis and Weaviate volumes!$(NC)"
	@read -p "Are you sure? [y/N] " -n 1 -r; \
	echo; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		$(COMPOSE) down -v; \
		docker system prune -af; \
		echo "$(GREEN)Full cleanup complete.$(NC)"; \
	else \
		echo "$(YELLOW)Cleanup cancelled.$(NC)"; \
	fi

clean-cache: ## Clear Python cache files
	@echo "$(BLUE)Clearing Python cache...$(NC)"
	@find . -type d -name __pycache__ -exec rm -rf {} + 2>/dev/null || true
	@find . -type f -name "*.pyc" -delete
	@find . -type f -name "*.pyo" -delete
	@echo "$(GREEN)Cache cleared.$(NC)"

###############################
# Monitoring
###############################

monitoring-up: ## Start monitoring stack (Prometheus + Grafana)
	@echo "$(BLUE)Starting monitoring stack...$(NC)"
	@$(COMPOSE) --profile monitoring up -d
	@echo "$(GREEN)Monitoring available at:$(NC)"
	@echo "  - Prometheus: localhost:9090"
	@echo "  - Grafana:    localhost:3000 (admin/admin)"

monitoring-down: ## Stop monitoring stack
	@$(COMPOSE) --profile monitoring down

###############################
# Utilities
###############################

logs: ## Tail logs from all services
	@$(COMPOSE) logs -f --tail=100

ps: ## Show running containers
	@$(COMPOSE) ps

exec: ## Execute command in agent-dev (use CMD="command")
	@$(COMPOSE) exec agent-dev $(CMD)

.PHONY: version
version: ## Show version information
	@echo "$(BLUE)Sophia AI Version Information:$(NC)"
	@echo "Project: $(PROJECT_NAME)"
	@echo "Docker Compose: $$(docker compose version)"
	@echo "Python: $$($(PYTHON) --version)"
	@grep version packages/sophia_core/__init__.py || echo "Version: Development"

.PHONY: check-artemis
check-artemis: ## Check if artemis-cli is available
	@if [ -d "$(ARTEMIS_PATH)" ]; then \
		echo "$(GREEN)✓ Artemis CLI found at $(ARTEMIS_PATH)$(NC)"; \
	else \
		echo "$(RED)✗ Artemis CLI not found at $(ARTEMIS_PATH)$(NC)"; \
		echo "$(YELLOW)Please clone artemis-cli to ../artemis-cli$(NC)"; \
	fi