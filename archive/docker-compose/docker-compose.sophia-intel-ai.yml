version: '3.8'

# Sophia AI Unified Production Deployment for sophia-intel.ai
# Neural-native architecture with edge optimization and real-time capabilities

services:
  # Neural Engine - DeepSeek-R1-0528 Core
  neural-engine:
    build: 
      context: ./services/neural-engine
      dockerfile: Dockerfile
    container_name: sophia-neural-engine
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 8
              capabilities: [gpu]
    environment:
      - CUDA_VISIBLE_DEVICES=0,1,2,3,4,5,6,7
      - PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512
      - NCCL_P2P_DISABLE=0
      - REDIS_HOST=redis-cluster
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres-main
      - POSTGRES_DB=sophia_ai
      - POSTGRES_USER=sophia
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - LAMBDA_API_KEY=${LAMBDA_API_KEY}
      - LAMBDA_CLOUD_API_KEY=${LAMBDA_CLOUD_API_KEY}
    ports:
      - "8001:8001"
    volumes:
      - neural-model-cache:/root/.cache/huggingface
      - ./logs:/app/logs
    networks:
      - sophia-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - redis-cluster
      - postgres-main

  # Neural Gateway - Intelligent Routing
  neural-gateway:
    build:
      context: ./services/neural-gateway
      dockerfile: Dockerfile
    container_name: sophia-neural-gateway
    restart: unless-stopped
    environment:
      - NEURAL_ENGINE_URL=http://neural-engine:8001
      - CHAT_SERVICE_URL=http://chat-service:8002
      - DASHBOARD_SERVICE_URL=http://dashboard-service:8003
      - ASIP_ORCHESTRATOR_URL=http://asip-orchestrator:8100
      - REDIS_HOST=redis-cluster
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres-main
      - POSTGRES_DB=sophia_ai
      - POSTGRES_USER=sophia
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
    networks:
      - sophia-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 5s
      retries: 3
    depends_on:
      - neural-engine
      - redis-cluster

  # Chat Service - Real-time WebSocket
  chat-service:
    build:
      context: ./services/chat-service
      dockerfile: Dockerfile
    container_name: sophia-chat-service
    restart: unless-stopped
    environment:
      - NEURAL_GATEWAY_URL=http://neural-gateway:8000
      - REDIS_HOST=redis-cluster
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres-main
      - POSTGRES_DB=sophia_ai
      - POSTGRES_USER=sophia
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - MEM0_API_KEY=${MEM0_API_KEY}
      - WEBSOCKET_MAX_CONNECTIONS=1000
    ports:
      - "8002:8002"
    volumes:
      - ./logs:/app/logs
      - chat-uploads:/app/uploads
    networks:
      - sophia-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 20s
      timeout: 5s
      retries: 3
    depends_on:
      - neural-gateway
      - redis-cluster

  # Dashboard Service - Analytics & Monitoring
  dashboard-service:
    build:
      context: ./services/dashboard-service
      dockerfile: Dockerfile
    container_name: sophia-dashboard-service
    restart: unless-stopped
    environment:
      - PROMETHEUS_URL=http://prometheus:9090
      - GRAFANA_URL=http://grafana:3000
      - REDIS_HOST=redis-cluster
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres-main
      - POSTGRES_DB=sophia_ai
      - POSTGRES_USER=sophia
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "8003:8003"
    volumes:
      - ./logs:/app/logs
    networks:
      - sophia-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - prometheus
      - grafana

  # ASIP Orchestrator - Enhanced Swarm Intelligence
  asip-orchestrator:
    build:
      context: ./services/chat-orchestrator
      dockerfile: Dockerfile
    container_name: sophia-asip-orchestrator
    restart: unless-stopped
    environment:
      - NEURAL_ENGINE_URL=http://neural-engine:8001
      - REDIS_HOST=redis-cluster
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres-main
      - POSTGRES_DB=sophia_ai
      - POSTGRES_USER=sophia
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PORTKEY_API_KEY=${PORTKEY_API_KEY}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
    ports:
      - "8100:8100"
    volumes:
      - ./logs:/app/logs
    networks:
      - sophia-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8100/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - neural-engine
      - redis-cluster

  # Load Balancer - nginx with SSL termination
  load-balancer:
    image: nginx:alpine
    container_name: sophia-load-balancer
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./infrastructure/ssl:/etc/ssl/certs:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - sophia-net
    depends_on:
      - neural-gateway
      - chat-service
      - dashboard-service
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 5s
      retries: 3

  # PostgreSQL - Main Database
  postgres-main:
    image: postgres:15-alpine
    container_name: sophia-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=sophia_ai
      - POSTGRES_USER=sophia
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - ./logs/postgres:/var/log/postgresql
    networks:
      - sophia-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sophia -d sophia_ai"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cluster - Multi-tier Caching
  redis-cluster:
    image: redis:7-alpine
    container_name: sophia-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 32gb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./infrastructure/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - sophia-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 5s
      retries: 3

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: sophia-qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant-data:/qdrant/storage
      - ./infrastructure/qdrant/config.yaml:/qdrant/config/production.yaml:ro
    networks:
      - sophia-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: sophia-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./infrastructure/prometheus/rules:/etc/prometheus/rules:ro
    networks:
      - sophia-net
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://104.171.202.103:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana - Monitoring Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: sophia-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./infrastructure/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./infrastructure/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - sophia-net
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f ${SOPHIA_FRONTEND_ENDPOINT}/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: sophia-jaeger
    restart: unless-stopped
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "4317:4317"
      - "4318:4318"
    volumes:
      - jaeger-data:/badger
    networks:
      - sophia-net
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Applications (served via nginx)
  frontend-web:
    build:
      context: ./frontend/web
      dockerfile: Dockerfile
      target: production
    container_name: sophia-frontend-web
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=http://104.171.202.103:8080/api
      - NEXT_PUBLIC_CHAT_URL=https://chat.sophia-intel.ai
      - NEXT_PUBLIC_DASHBOARD_URL=https://dashboard.sophia-intel.ai
    volumes:
      - frontend-web-build:/app/.next
    networks:
      - sophia-net

  frontend-chat:
    build:
      context: ./frontend/chat
      dockerfile: Dockerfile
      target: production
    container_name: sophia-frontend-chat
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=http://104.171.202.103:8080/api
      - NEXT_PUBLIC_WS_URL=wss://chat.sophia-intel.ai
    volumes:
      - frontend-chat-build:/app/.next
    networks:
      - sophia-net

  frontend-dashboard:
    build:
      context: ./frontend/dashboard
      dockerfile: Dockerfile
      target: production
    container_name: sophia-frontend-dashboard
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=http://104.171.202.103:8080/api
      - NEXT_PUBLIC_DASHBOARD_URL=https://dashboard.sophia-intel.ai
    volumes:
      - frontend-dashboard-build:/app/.next
    networks:
      - sophia-net

# Networks
networks:
  sophia-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  # Neural architecture
  neural-model-cache:
    driver: local
  
  # Database storage
  postgres-data:
    driver: local
  redis-data:
    driver: local
  qdrant-data:
    driver: local
  
  # Monitoring storage
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  jaeger-data:
    driver: local
  
  # Application storage
  chat-uploads:
    driver: local
  frontend-web-build:
    driver: local
  frontend-chat-build:
    driver: local
  frontend-dashboard-build:
    driver: local

# Environment variables template
# Create .env file with these variables:
# POSTGRES_PASSWORD=your_secure_password
# GRAFANA_PASSWORD=your_grafana_password
# LAMBDA_API_KEY=secret_sophia5apikey_a404a99d985d41828d7020f0b9a122a2.PjbWZb0lLubKu1nmyWYLy9Ycl3vyL18o
# LAMBDA_CLOUD_API_KEY=secret_sophiacloudapi_17cf7f3cedca48f18b4b8ea46cbb258f.EsLXt0lkGlhZ1Nd369Ld5DMSuhJg9O9y
# MEM0_API_KEY=your_mem0_api_key
# PORTKEY_API_KEY=your_portkey_api_key
# OPENROUTER_API_KEY=your_openrouter_api_key

