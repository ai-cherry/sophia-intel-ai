#!/usr/bin/env bash

# LiteLLM CLI Test Suite
# Comprehensive testing for ARM64/M3 optimization

set -euo pipefail

GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

CLI_PATH="/Users/lynnmusil/sophia-intel-ai/bin/litellm-cli"
CONFIG_PATH="/Users/lynnmusil/.config/litellm/cli-config.yaml"
VENV_PATH="/Users/lynnmusil/sophia-intel-ai/.venv-litellm"

log() {
    echo -e "${GREEN}[TEST]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# Test file existence
test_files() {
    log "Testing file existence..."
    
    local files=(
        "$CLI_PATH"
        "$CONFIG_PATH"
        "$VENV_PATH/bin/litellm"
        "/Users/lynnmusil/.config/litellm/environment.sh"
        "/Users/lynnmusil/.config/litellm/README.md"
    )
    
    for file in "${files[@]}"; do
        if [[ -e "$file" ]]; then
            echo "  ✅ $file"
        else
            echo "  ❌ $file (missing)"
            return 1
        fi
    done
    
    log "File existence test passed"
}

# Test CLI script
test_cli_script() {
    log "Testing CLI script functionality..."
    
    # Test help command
    if "$CLI_PATH" help > /dev/null 2>&1; then
        echo "  ✅ Help command works"
    else
        echo "  ❌ Help command failed"
        return 1
    fi
    
    # Test executable permissions
    if [[ -x "$CLI_PATH" ]]; then
        echo "  ✅ CLI script is executable"
    else
        echo "  ❌ CLI script not executable"
        return 1
    fi
    
    log "CLI script test passed"
}

# Test virtual environment
test_venv() {
    log "Testing virtual environment..."
    
    cd /Users/lynnmusil/sophia-intel-ai
    
    # Activate environment and test LiteLLM
    if source .venv-litellm/bin/activate && litellm --version > /dev/null 2>&1; then
        echo "  ✅ Virtual environment and LiteLLM working"
        local version=$(litellm --version 2>/dev/null || echo "unknown")
        echo "  📦 LiteLLM version: $version"
    else
        echo "  ❌ Virtual environment or LiteLLM not working"
        return 1
    fi
    
    log "Virtual environment test passed"
}

# Test configuration
test_config() {
    log "Testing configuration..."
    
    # Check YAML syntax
    if python3 -c "import yaml; yaml.safe_load(open('$CONFIG_PATH'))" 2>/dev/null; then
        echo "  ✅ Configuration YAML is valid"
    else
        echo "  ❌ Configuration YAML is invalid"
        return 1
    fi
    
    # Check environment script
    if bash -n /Users/lynnmusil/.config/litellm/environment.sh; then
        echo "  ✅ Environment script syntax is valid"
    else
        echo "  ❌ Environment script has syntax errors"
        return 1
    fi
    
    log "Configuration test passed"
}

# Test ARM64 optimization
test_arm64_optimization() {
    log "Testing ARM64 optimization..."
    
    # Check architecture
    local arch=$(uname -m)
    if [[ "$arch" == "arm64" ]]; then
        echo "  ✅ Running on ARM64 architecture"
        
        # Check MPS availability (Metal Performance Shaders)
        if python3 -c "
import os
os.environ['MPS_AVAILABLE'] = '1'
try:
    import torch
    if torch.backends.mps.is_available():
        print('  ✅ Metal Performance Shaders available')
    else:
        print('  ⚠️  MPS not available, using CPU')
except ImportError:
    print('  ⚠️  PyTorch not installed, MPS check skipped')
" 2>/dev/null; then
            :  # Success message already printed
        fi
        
    else
        warn "Not running on ARM64 (current: $arch), ARM64 optimizations disabled"
    fi
    
    log "ARM64 optimization test completed"
}

# Test network connectivity
test_connectivity() {
    log "Testing network connectivity..."
    
    # Test if ports are available
    local ports=(4000 8081 8082 8084)
    for port in "${ports[@]}"; do
        if lsof -i ":$port" > /dev/null 2>&1; then
            echo "  ⚠️  Port $port is in use"
        else
            echo "  ✅ Port $port is available"
        fi
    done
    
    # Test localhost connectivity
    if curl -s --connect-timeout 2 http://localhost:4000/health > /dev/null 2>&1; then
        echo "  ✅ LiteLLM proxy responding on port 4000"
    else
        echo "  ⚠️  LiteLLM proxy not responding (expected if not started)"
    fi
    
    log "Network connectivity test completed"
}

# Test proxy startup (optional)
test_proxy_startup() {
    log "Testing proxy startup (optional)..."
    
    info "This test will start and stop the proxy server"
    read -p "Continue? (y/N): " -n 1 -r
    echo
    
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        warn "Proxy startup test skipped"
        return 0
    fi
    
    # Start proxy in background
    "$CLI_PATH" start-proxy > /tmp/litellm-test.log 2>&1 &
    local proxy_pid=$!
    
    # Wait for startup
    sleep 5
    
    # Test if proxy is responding
    if curl -s http://localhost:4000/health > /dev/null 2>&1; then
        echo "  ✅ Proxy started successfully"
        
        # Test models endpoint
        if curl -s http://localhost:4000/models > /dev/null 2>&1; then
            echo "  ✅ Models endpoint responding"
        else
            echo "  ⚠️  Models endpoint not responding"
        fi
        
    else
        echo "  ❌ Proxy failed to start"
        kill $proxy_pid 2>/dev/null || true
        return 1
    fi
    
    # Stop proxy
    "$CLI_PATH" stop-proxy > /dev/null 2>&1 || kill $proxy_pid 2>/dev/null || true
    echo "  ✅ Proxy stopped successfully"
    
    log "Proxy startup test passed"
}

# Test performance characteristics
test_performance() {
    log "Testing performance characteristics..."
    
    cd /Users/lynnmusil/sophia-intel-ai
    source .venv-litellm/bin/activate
    
    # Test import speed
    local start_time=$(date +%s.%N)
    python3 -c "import litellm" 2>/dev/null
    local end_time=$(date +%s.%N)
    local import_time=$(echo "$end_time - $start_time" | bc -l 2>/dev/null || echo "unknown")
    
    echo "  📊 LiteLLM import time: ${import_time}s"
    
    # Test memory usage
    local memory_usage=$(python3 -c "
import psutil, os
process = psutil.Process(os.getpid())
print(f'{process.memory_info().rss / 1024 / 1024:.1f}')
" 2>/dev/null || echo "unknown")
    
    echo "  💾 Current memory usage: ${memory_usage}MB"
    
    log "Performance test completed"
}

# Run comprehensive test suite
run_all_tests() {
    echo -e "${BLUE}LiteLLM CLI Test Suite - ARM64/M3 Optimization${NC}"
    echo "================================================"
    echo
    
    local tests=(
        "test_files"
        "test_cli_script" 
        "test_venv"
        "test_config"
        "test_arm64_optimization"
        "test_connectivity"
        "test_performance"
    )
    
    local passed=0
    local total=${#tests[@]}
    
    for test in "${tests[@]}"; do
        echo
        if $test; then
            ((passed++))
        else
            error "Test $test failed"
        fi
    done
    
    echo
    echo "================================================"
    if [[ $passed -eq $total ]]; then
        log "All tests passed! ($passed/$total)"
        echo
        echo -e "${GREEN}🎉 LiteLLM CLI is ready for use!${NC}"
        echo
        echo -e "${BLUE}Quick start:${NC}"
        echo "  $CLI_PATH start-proxy    # Start proxy server"
        echo "  $CLI_PATH test          # Test connectivity"  
        echo "  $CLI_PATH chat          # Interactive chat"
        echo
    else
        error "Some tests failed ($passed/$total passed)"
        echo
        echo -e "${YELLOW}Check the output above for specific issues${NC}"
        return 1
    fi
}

# Main function
main() {
    case "${1:-all}" in
        "all")
            run_all_tests
            ;;
        "files")
            test_files
            ;;
        "cli")
            test_cli_script
            ;;
        "venv")
            test_venv
            ;;
        "config")
            test_config
            ;;
        "arm64")
            test_arm64_optimization
            ;;
        "network")
            test_connectivity
            ;;
        "proxy")
            test_proxy_startup
            ;;
        "performance")
            test_performance
            ;;
        "help"|"-h"|"--help")
            cat << EOF
LiteLLM CLI Test Suite

Usage: $0 [test]

Tests:
  all          Run all tests (default)
  files        Test file existence
  cli          Test CLI script
  venv         Test virtual environment
  config       Test configuration
  arm64        Test ARM64 optimizations
  network      Test network connectivity
  proxy        Test proxy startup (interactive)
  performance  Test performance characteristics
  help         Show this help

Examples:
  $0              # Run all tests
  $0 proxy        # Test proxy startup only
  $0 arm64        # Test ARM64 optimizations only
EOF
            ;;
        *)
            error "Unknown test: $1. Use 'help' for usage."
            exit 1
            ;;
    esac
}

# Run main function
main "$@"