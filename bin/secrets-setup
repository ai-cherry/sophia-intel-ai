#!/usr/bin/env bash
set -euo pipefail

# Developer onboarding script for secrets setup
# Usage: ./bin/secrets-setup [--dev|--prod]

SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
REPO_ROOT="${SCRIPT_DIR}/.."
ENV_FILE="${REPO_ROOT}/.env.local"

print_banner() {
    echo "üîê Sophia Intel AI - Secrets Setup"
    echo "=================================="
}

print_help() {
    echo "Usage: $0 [--dev|--prod]"
    echo ""
    echo "Options:"
    echo "  --dev     Setup for development (creates .env.local with dev secrets)"
    echo "  --prod    Show production setup instructions"
    echo "  --help    Show this help message"
    echo ""
    echo "This script helps you configure secrets for the Sophia Intel AI system."
}

setup_dev() {
    echo "üõ†Ô∏è  Setting up development environment..."
    echo ""
    
    # Generate strong JWT secret
    JWT_SECRET=$(openssl rand -base64 32 2>/dev/null || python3 -c "import secrets; print(secrets.token_urlsafe(32))")
    
    # Create .env.local template
    cat > "$ENV_FILE" << EOF
# Development Environment Variables
# This file is gitignored and safe for local secrets

# ===========================================
# MCP JWT Authentication (REQUIRED)
# ===========================================
MCP_JWT_SECRET=${JWT_SECRET}
MCP_DEV_BYPASS=1

# ===========================================
# API Keys (REPLACE WITH REAL VALUES)
# ===========================================
# Get your Portkey API key from: https://portkey.ai/
PORTKEY_API_KEY=your_portkey_api_key_here

# ===========================================
# Integration Secrets (OPTIONAL)
# ===========================================
# Slack Bot Token (starts with xoxb-)
SLACK_BOT_TOKEN=xoxb-your-slack-bot-token-here
SLACK_SIGNING_SECRET=your_slack_signing_secret_here

# Microsoft Graph API
MICROSOFT_CLIENT_ID=your_microsoft_client_id_here
MICROSOFT_TENANT_ID=your_microsoft_tenant_id_here
MICROSOFT_SECRET_KEY=your_microsoft_secret_key_here

# GitHub Personal Access Token
GITHUB_TOKEN=your_github_token_here

# ===========================================
# Database URLs (OPTIONAL - uses defaults)
# ===========================================
REDIS_URL=redis://localhost:6379/1
WEAVIATE_URL=http://localhost:8080

# ===========================================
# Development Flags
# ===========================================
# Enable various development features
ENABLE_TELEMETRY=false
MCP_DEV_BYPASS=1
LOG_LEVEL=DEBUG
EOF

    echo "‚úÖ Created .env.local with development configuration"
    echo ""
    echo "üéØ Next steps:"
    echo "   1. Edit .env.local and replace 'your_*_here' with real API keys"
    echo "   2. For Portkey: Visit https://portkey.ai/ to get your API key"
    echo "   3. For Slack: Create a Slack app at https://api.slack.com/apps"
    echo "   4. Test your setup with: ./bin/mcp-token --aud filesystem"
    echo ""
    echo "üí° The generated MCP_JWT_SECRET is:"
    echo "   ${JWT_SECRET}"
    echo ""
    echo "üîí Keep this secret safe! It's used to sign all MCP tokens."
}

setup_prod() {
    echo "üöÄ Production Setup Instructions"
    echo ""
    echo "For production deployment, follow these steps:"
    echo ""
    echo "1. üîë GitHub Environments Setup:"
    echo "   - Go to your repository Settings > Environments"
    echo "   - Create environments: dev, staging, prod"
    echo "   - Add required reviewers for prod environment"
    echo ""
    echo "2. üõ°Ô∏è  Required Secrets (add to each environment):"
    echo "   MCP_JWT_SECRET=$(openssl rand -base64 32)"
    echo "   PORTKEY_API_KEY=your_portkey_key"
    echo "   REDIS_URL=your_redis_connection_string"
    echo "   WEAVIATE_URL=your_weaviate_endpoint"
    echo ""
    echo "3. üîê Optional Integration Secrets:"
    echo "   SLACK_BOT_TOKEN=xoxb-your-token"
    echo "   MICROSOFT_SECRET_KEY=your_ms_secret"
    echo "   GITHUB_TOKEN=your_github_token"
    echo ""
    echo "4. üéõÔ∏è  Environment Variables:"
    echo "   MCP_DEV_BYPASS=0  # Disable dev bypass in production"
    echo "   ENVIRONMENT=production"
    echo "   LOG_LEVEL=INFO"
    echo ""
    echo "5. üîç Verification:"
    echo "   - All security CI checks must pass"
    echo "   - Health endpoints must return 200"
    echo "   - JWT token generation must work"
    echo ""
    echo "üìö See SECURITY.md for detailed procedures and rotation schedules."
}

test_setup() {
    echo "üß™ Testing your setup..."
    echo ""
    
    # Check if .env.local exists
    if [[ ! -f "$ENV_FILE" ]]; then
        echo "‚ùå .env.local not found. Run with --dev to create it."
        return 1
    fi
    
    # Source the env file
    set -a
    source "$ENV_FILE" 2>/dev/null || true
    set +a
    
    # Test JWT secret
    if [[ -z "${MCP_JWT_SECRET:-}" ]]; then
        echo "‚ùå MCP_JWT_SECRET not set"
        return 1
    else
        echo "‚úÖ MCP_JWT_SECRET configured"
    fi
    
    # Test token generation
    if command -v python3 >/dev/null 2>&1; then
        if "${SCRIPT_DIR}/mcp-token" --aud filesystem --ttl 60 >/dev/null 2>&1; then
            echo "‚úÖ JWT token generation working"
        else
            echo "‚ùå JWT token generation failed"
            return 1
        fi
    else
        echo "‚ö†Ô∏è  Python3 not found, skipping token test"
    fi
    
    # Check Portkey key format
    if [[ "${PORTKEY_API_KEY:-}" =~ ^pk_live_ ]]; then
        echo "‚úÖ Portkey API key looks valid"
    elif [[ "${PORTKEY_API_KEY:-}" == "your_portkey_api_key_here" ]]; then
        echo "‚ö†Ô∏è  Portkey API key not configured (using placeholder)"
    else
        echo "‚ùå Portkey API key format invalid (should start with pk_live_)"
    fi
    
    echo ""
    echo "üéØ Setup test complete!"
}

main() {
    print_banner
    
    case "${1:-}" in
        --dev)
            setup_dev
            test_setup
            ;;
        --prod)
            setup_prod
            ;;
        --test)
            test_setup
            ;;
        --help|-h)
            print_help
            ;;
        "")
            echo "‚ÑπÔ∏è  No option specified. Use --help for usage information."
            echo ""
            echo "Quick start:"
            echo "  ./bin/secrets-setup --dev    # Set up development environment"
            echo "  ./bin/secrets-setup --prod   # Show production instructions"
            ;;
        *)
            echo "‚ùå Unknown option: $1"
            print_help
            exit 1
            ;;
    esac
}

main "$@"
