#!/usr/bin/env zsh
# Sophia Intel AI - Unified CLI Wrapper (legacy)
# Intelligently routes between Codex and Claude based on task complexity

set -euo pipefail

# Environment is loaded by ./sophia; no local sourcing here to avoid drift.

# Configuration
REPO_ROOT="$HOME/sophia-intel-ai"
PERSONA_FILE="$REPO_ROOT/configs/agents/master_architect.md"
DEFAULT_PROVIDER="${CLI_PROVIDER:-claude}"
DEFAULT_MODEL="${CLI_MODEL:-claude-3-5-sonnet-20240620}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Task routing logic
route_task() {
    local task="$1"
    local complexity=$(analyze_complexity "$task")
    
    if [[ "$complexity" == "simple" ]]; then
        echo "codex"
    elif [[ "$complexity" == "complex" ]]; then
        echo "claude"
    else
        echo "$DEFAULT_PROVIDER"
    fi
}

analyze_complexity() {
    local task="$1"
    
    # Simple heuristics for task complexity
    if echo "$task" | grep -qE "(refactor|optimize|quick|simple|fix|update)"; then
        echo "simple"
    elif echo "$task" | grep -qE "(architect|design|complex|security|analyze|plan)"; then
        echo "complex"
    else
        echo "moderate"
    fi
}

# Note: For service control and health, prefer using repo `./dev`:
#   ./dev start|stop|status|health|test|check

# Main execution
ACTION="${1:-help}"
shift || true

case "$ACTION" in
    plan)
        TASK="$*"
        echo -e "${YELLOW}‚ö†Ô∏è  In-repo provider CLIs are not invoked.${NC}"
        echo -e "Use external Forge (standalone coding UI) or Toolbox CLIs. See docs/CODING_UI_STANDALONE.md and docs/EXTERNAL_TOOLS.md."
        exit 2
        ;;
        
    implement|impl)
        TASK="$*"
        echo -e "${YELLOW}‚ö†Ô∏è  In-repo provider CLIs are not invoked.${NC}"
        echo -e "Use external Forge (standalone coding UI) to Plan‚ÜíPatch‚ÜíValidate against this repo via MCP."
        exit 2
        ;;
        
    validate|val)
        # Run validation suite
        echo -e "${BLUE}üîç Running validation suite...${NC}"
        echo ""
        
        # Check configuration
        echo "Configuration:"
        if [[ -f "$(dirname "$0")/../.env.master" ]]; then
          echo -e "${GREEN}‚úÖ .env.master present (single source)${NC}"
        else
          echo -e "${YELLOW}‚ö†Ô∏è  .env.master missing in repo root${NC}"
        fi
        [[ -f "$PERSONA_FILE" ]] && echo -e "${GREEN}‚úÖ Persona file exists${NC}" || echo -e "${RED}‚ùå Persona file missing${NC}"
        
        echo ""
        echo "CLI Availability:"
        # Check CLI availability
        command -v codex >/dev/null 2>&1 && echo -e "${GREEN}‚úÖ Codex CLI available${NC}" || echo -e "${YELLOW}‚ö†Ô∏è  Codex CLI not found${NC}"
        command -v claude >/dev/null 2>&1 && echo -e "${GREEN}‚úÖ Claude CLI available${NC}" || echo -e "${YELLOW}‚ö†Ô∏è  Claude CLI not found${NC}"
        command -v grok >/dev/null 2>&1 && echo -e "${GREEN}‚úÖ Grok CLI available${NC}" || echo -e "${YELLOW}‚ö†Ô∏è  Grok CLI not found${NC}"
        command -v deepseek >/dev/null 2>&1 && echo -e "${GREEN}‚úÖ DeepSeek CLI available${NC}" || echo -e "${YELLOW}‚ö†Ô∏è  DeepSeek CLI not found${NC}"
        
        echo ""
        echo "MCP Services:"
        # Check MCP services
        curl -s http://localhost:8081/health >/dev/null 2>&1 && echo -e "${GREEN}‚úÖ MCP Memory service running${NC}" || echo -e "${YELLOW}‚ö†Ô∏è  MCP Memory service not running${NC}"
        curl -s http://localhost:8082/health >/dev/null 2>&1 && echo -e "${GREEN}‚úÖ MCP Filesystem service running${NC}" || echo -e "${YELLOW}‚ö†Ô∏è  MCP Filesystem service not running${NC}"
        curl -s http://localhost:8084/health >/dev/null 2>&1 && echo -e "${GREEN}‚úÖ MCP Git service running${NC}" || echo -e "${YELLOW}‚ö†Ô∏è  MCP Git service not running${NC}"
        curl -s http://localhost:8000/api/health >/dev/null 2>&1 && echo -e "${GREEN}‚úÖ Unified API running${NC}" || echo -e "${YELLOW}‚ö†Ô∏è  Unified API not running${NC}"
        ;;
        
    help|*)
        cat << HELP
${BLUE}Sophia Unified CLI - Intelligent Development Assistant${NC}

Usage:
  sophia-cli plan <task>       - Create a plan for the task
  sophia-cli implement <task>  - Implement based on plan
  sophia-cli validate          - Validate system configuration
  sophia-cli help             - Show this help message

Shortcuts:
  sophia-cli impl <task>      - Alias for implement
  sophia-cli val              - Alias for validate

Environment Variables:
  CLI_PROVIDER  - Default provider (claude|codex)
  CLI_MODEL     - Default model to use
  CODEX_MODEL   - Specific model for Codex

Examples:
  sophia-cli plan "Add user authentication endpoint"
  sophia-cli implement "Refactor database connections for better performance"
  sophia-cli validate

Provider Selection:
  - Simple tasks (refactor, fix, update) ‚Üí Codex (fast)
  - Complex tasks (architect, design, analyze) ‚Üí Claude (thorough)
  - Override with: CLI_PROVIDER=codex sophia-cli plan "task"
HELP
        ;;
esac
