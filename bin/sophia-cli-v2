#!/usr/bin/env zsh
# Sophia Intel AI - Enhanced CLI v2.0 with Swarm Support (legacy)
# Merges unified CLI with multi-agent orchestration

set -euo pipefail

# Note: For service control and health, prefer using repo `./dev`:
#   ./dev start|stop|status|health|test|check

# Load environment
[[ -f "$HOME/.config/sophia/env" ]] && source "$HOME/.config/sophia/env"

# Configuration
REPO_ROOT="$HOME/sophia-intel-ai"
AGENTS_MD="$REPO_ROOT/AGENTS.md"
WORKTREES_DIR="$REPO_ROOT/../worktrees"
LOG_DIR="$REPO_ROOT/logs"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Worktree management functions
wt() { 
    git worktree add "$WORKTREES_DIR/$1" main 2>/dev/null || true
    cd "$WORKTREES_DIR/$1" && git checkout -b "$1" 2>/dev/null || git checkout "$1"
    echo -e "${GREEN}‚úÖ Worktree '$1' ready at $WORKTREES_DIR/$1${NC}"
}

wtc() { 
    git worktree list --porcelain | grep -B2 "branch refs/heads/" | grep "worktree" | cut -d' ' -f2 | xargs -I {} git worktree remove {} 2>/dev/null || true
    echo -e "${GREEN}‚úÖ All worktrees cleaned${NC}"
}

wtl() {
    echo -e "${CYAN}Active Worktrees:${NC}"
    git worktree list
}

# Enhanced task routing with LLM preferences
route_task() {
    local task="$1"
    local complexity=$(analyze_complexity "$task")
    
    # Model selection based on task complexity and type
    if echo "$task" | grep -qE "(architect|design|plan|structure)"; then
        echo "claude-opus-4.1"  # Best for architecture
    elif echo "$task" | grep -qE "(fast|quick|simple|fix|typo)"; then
        echo "grok-5"  # Fastest
    elif echo "$task" | grep -qE "(test|validate|security|audit)"; then
        echo "llama-scout-4"  # Good context awareness
    elif echo "$task" | grep -qE "(optimize|performance|speed)"; then
        echo "google-flash-2.5"  # Performance focused
    else
        echo "${DEFAULT_MODEL:-claude-opus-4.1}"
    fi
}

analyze_complexity() {
    local task="$1"
    
    if echo "$task" | grep -qE "(refactor|optimize|quick|simple|fix|update)"; then
        echo "simple"
    elif echo "$task" | grep -qE "(architect|design|complex|security|analyze|plan)"; then
        echo "complex"
    elif echo "$task" | grep -qE "(parallel|swarm|multi|team)"; then
        echo "swarm"
    else
        echo "moderate"
    fi
}

# MCP health check
check_mcp_health() {
    echo -e "${CYAN}Checking MCP Services...${NC}"
    
    local services=(
        "8081:Memory"
        "8082:Filesystem"
        "8084:Git"
    )
    
    local all_healthy=true
    for service in "${services[@]}"; do
        IFS=':' read -r port name <<< "$service"
        if curl -s "http://localhost:$port/health" >/dev/null 2>&1; then
            echo -e "  ${GREEN}‚úÖ $name (port $port)${NC}"
        else
            echo -e "  ${RED}‚ùå $name (port $port) - Not running${NC}"
            all_healthy=false
        fi
    done
    
    if ! $all_healthy; then
        echo -e "${YELLOW}‚ö†Ô∏è  Some MCP services are not running. Starting them...${NC}"
        start_mcp_servers
    fi
}

# Start MCP servers
start_mcp_servers() {
    echo -e "${CYAN}Starting MCP servers...${NC}"
    
    # Ensure Redis is running
    redis-cli ping >/dev/null 2>&1 || redis-server --daemonize yes
    
    # Start MCP servers in background
    nohup python3 "$REPO_ROOT/mcp/memory_server.py" > "$LOG_DIR/mcp_memory.log" 2>&1 &
    nohup python3 "$REPO_ROOT/mcp/filesystem.py" > "$LOG_DIR/mcp_filesystem.log" 2>&1 &
    nohup python3 "$REPO_ROOT/mcp/git_server.py" > "$LOG_DIR/mcp_git.log" 2>&1 &
    
    sleep 3
    echo -e "${GREEN}‚úÖ MCP servers started${NC}"
}

# Swarm orchestration
launch_swarm() {
    local task="$1"
    
    echo -e "${MAGENTA}üöÄ Launching Agent Swarm${NC}"
    echo -e "${CYAN}Task: $task${NC}"
    
    # Create worktrees for each agent
    echo -e "${BLUE}Creating agent workspaces...${NC}"
    wt "planner"
    wt "implementer"
    wt "tester"
    wt "optimizer"
    
    # Initialize handoff directory
    mkdir -p "$LOG_DIR/handoffs"
    
    # Create swarm configuration
    cat > "$LOG_DIR/swarm_config.json" << EOF
{
    "task": "$task",
    "agents": [
        {
            "name": "planner",
            "model": "claude-opus-4.1",
            "workspace": "$WORKTREES_DIR/planner",
            "persona": "Master Architect",
            "role": "Create implementation plan"
        },
        {
            "name": "implementer", 
            "model": "grok-5",
            "workspace": "$WORKTREES_DIR/implementer",
            "persona": "TypeScript Specialist",
            "role": "Implement based on plan"
        },
        {
            "name": "tester",
            "model": "llama-scout-4",
            "workspace": "$WORKTREES_DIR/tester",
            "persona": "Test Engineer",
            "role": "Write and run tests"
        },
        {
            "name": "optimizer",
            "model": "google-flash-2.5",
            "workspace": "$WORKTREES_DIR/optimizer",
            "persona": "Performance Optimizer",
            "role": "Optimize implementation"
        }
    ],
    "mcp_servers": {
        "memory": "http://localhost:8081",
        "filesystem": "http://localhost:8082",
        "git": "http://localhost:8084"
    }
}
EOF
    
    echo -e "${GREEN}‚úÖ Swarm configuration created${NC}"
    
    # Launch parallel agents (simplified for demo)
    echo -e "${CYAN}Agents working in parallel...${NC}"
    
    # Planner starts first
    echo -e "  ${BLUE}‚Üí Planner analyzing task...${NC}"
    cd "$WORKTREES_DIR/planner"
    echo "{\"agent\": \"planner\", \"status\": \"planning\", \"task\": \"$task\"}" > "$LOG_DIR/agent_planner.json"
    
    # Simulate planning output
    cat > "$LOG_DIR/handoffs/plan.json" << EOF
{
    "plan": {
        "architecture": "Modular design with separation of concerns",
        "components": ["API endpoint", "Service layer", "Data model", "Tests"],
        "interfaces": {"API": "REST", "Database": "PostgreSQL"},
        "steps": ["1. Create data model", "2. Implement service", "3. Add API endpoint", "4. Write tests"]
    }
}
EOF
    
    echo -e "  ${GREEN}‚úÖ Planning complete${NC}"
    
    # Other agents work based on plan
    echo -e "  ${BLUE}‚Üí Implementer coding...${NC}"
    echo -e "  ${BLUE}‚Üí Tester writing tests...${NC}"
    echo -e "  ${BLUE}‚Üí Optimizer analyzing performance...${NC}"
    
    # Simulate parallel work
    sleep 2
    
    echo -e "${GREEN}‚úÖ Swarm tasks complete${NC}"
    echo -e "${CYAN}Ready to merge from worktrees${NC}"
}

# Deduplication check
check_duplicates() {
    local pattern="$1"
    
    echo -e "${CYAN}Checking for duplicates...${NC}"
    
    # Check main repo
    echo -e "${BLUE}Main repository:${NC}"
    rg -i "$pattern" --type py --type ts "$REPO_ROOT" 2>/dev/null | head -5 || echo "  No matches"
    
    # Check worktrees
    if [[ -d "$WORKTREES_DIR" ]]; then
        echo -e "${BLUE}Worktrees:${NC}"
        for wt in "$WORKTREES_DIR"/*; do
            if [[ -d "$wt" ]]; then
                echo -e "  Checking $(basename "$wt")..."
                rg -i "$pattern" "$wt" 2>/dev/null | head -2 || true
            fi
        done
    fi
}

# Main execution
ACTION="${1:-help}"
shift || true

case "$ACTION" in
    swarm)
        check_mcp_health
        launch_swarm "$*"
        ;;
        
    plan)
        TASK="$*"
        MODEL=$(route_task "$TASK")
        echo -e "${BLUE}üß† Planning with $MODEL...${NC}"
        
        # Route to appropriate CLI
        if [[ "$MODEL" == *"claude"* ]]; then
            claude --append-system-prompt "$(cat $AGENTS_MD)" -p "PLAN: $TASK"
        elif [[ "$MODEL" == *"grok"* ]]; then
            grok --persona master-architect "PLAN: $TASK"
        else
            echo "Model $MODEL not configured yet"
        fi
        ;;
        
    implement|impl)
        TASK="$*"
        MODEL=$(route_task "$TASK")
        echo -e "${BLUE}‚ö° Implementing with $MODEL...${NC}"
        
        # Check for duplicates first
        check_duplicates "${TASK%% *}"
        
        # Route to appropriate CLI
        if [[ "$MODEL" == *"grok"* ]]; then
            grok --fast "IMPLEMENT: $TASK. Output unified diff and tests."
        else
            claude --append-system-prompt "$(cat $AGENTS_MD)" -p "IMPLEMENT: $TASK"
        fi
        ;;
        
    status)
        echo -e "${CYAN}üìä System Status${NC}"
        echo ""
        check_mcp_health
        echo ""
        wtl
        echo ""
        echo -e "${CYAN}Agent Logs:${NC}"
        ls -la "$LOG_DIR"/agent_*.json 2>/dev/null | tail -5 || echo "  No agent logs yet"
        ;;
        
    validate|val)
        echo -e "${BLUE}üîç Running validation suite...${NC}"
        
        # Run tests
        if [[ -f "$REPO_ROOT/tests/test_unified_cli_system.py" ]]; then
            python3 "$REPO_ROOT/tests/test_unified_cli_system.py"
        fi
        
        # Check for duplicates
        echo -e "${CYAN}Checking for code duplication...${NC}"
        check_duplicates "def |function |class |interface "
        ;;
        
    clean)
        echo -e "${YELLOW}üßπ Cleaning up...${NC}"
        wtc
        rm -f "$LOG_DIR"/agent_*.json
        rm -rf "$LOG_DIR/handoffs"
        echo -e "${GREEN}‚úÖ Cleanup complete${NC}"
        ;;
        
    kill-all)
        echo -e "${RED}‚õî Emergency stop...${NC}"
        pkill -f "mcp/memory_server.py" || true
        pkill -f "mcp/filesystem.py" || true
        pkill -f "mcp/git_server.py" || true
        wtc
        echo -e "${GREEN}‚úÖ All processes stopped${NC}"
        ;;
        
    help|*)
        cat << HELP
${CYAN}Sophia Intel AI - Enhanced CLI v2.0${NC}
${MAGENTA}Now with Swarm Intelligence!${NC}

Usage:
  sophia-cli swarm <task>      - Launch multi-agent swarm
  sophia-cli plan <task>       - Create a plan (single agent)
  sophia-cli implement <task>  - Implement based on plan
  sophia-cli status           - Check system and agent status
  sophia-cli validate         - Run validation suite
  sophia-cli clean            - Clean worktrees and logs
  sophia-cli kill-all         - Emergency stop all agents

Shortcuts:
  sophia-cli impl <task>      - Alias for implement
  sophia-cli val              - Alias for validate

Swarm Features:
  - Parallel agent execution in isolated worktrees
  - Automatic task decomposition and routing
  - MCP integration for shared memory/tools
  - Anti-fragmentation with deduplication checks
  - Full visibility via logs and status

Models Used:
  - Planning: claude-opus-4.1, chatgpt-5
  - Fast coding: grok-5, grok-code-fast-1
  - Testing: llama-scout-4
  - Optimization: google-flash-2.5

Examples:
  sophia-cli swarm "Build user auth with JWT, tests, and docs"
  sophia-cli plan "Design microservices architecture"
  sophia-cli implement "Add rate limiting to API"
  sophia-cli status

Configuration:
  - Environment: ~/.config/sophia/env
  - Agent rules: $REPO_ROOT/AGENTS.md
  - Logs: $REPO_ROOT/logs/
  - Worktrees: $REPO_ROOT/../worktrees/

${GREEN}Ready to orchestrate your code army! üöÄ${NC}
HELP
        ;;
esac
