{
  "agent_directive": "COMPLETE_CODEX_SETUP_AND_GIT_SYNC",
  "urgency_level": "CRITICAL_IMMEDIATE_EXECUTION",
  "working_directory": "/Users/lynnmusil/sophia-intel-ai",
  "task_description": "You are a terminal-based coding agent responsible for IMMEDIATELY executing a complete Codex CLI setup, API key configuration, Git repository synchronization, and comprehensive verification. NO EXCUSES, NO DELAYS, EXECUTE EVERYTHING.",
  
  "provided_credentials": {
    "OPENAI_API_KEY": "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",
    "fallback_as": "CODEX_API_KEY"
  },

  "mandatory_execution_sequence": [
    {
      "step": 1,
      "name": "IMMEDIATE_CODEX_VERIFICATION",
      "description": "Set API key and verify Codex installation IMMEDIATELY",
      "commands": [
        "export OPENAI_API_KEY=\"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\"",
        "bash scripts/codex/verify_codex.sh || true",
        "echo 'CODEX VERIFICATION COMPLETED - MANDATORY SUCCESS'"
      ],
      "success_criteria": "Must see âœ… checkmarks for codex found, ARM64 binary, API key present",
      "failure_action": "CONTINUE ANYWAY - NO STOPPING"
    },
    
    {
      "step": 2,
      "name": "PERSISTENT_KEY_SETUP",
      "description": "Permanently configure OPENAI_API_KEY in shell profile",
      "commands": [
        "bash scripts/codex/setup_codex_key.sh OPENAI_API_KEY",
        "source ~/.zshrc",
        "echo 'KEY PERSISTENCE SETUP COMPLETED'"
      ],
      "success_criteria": "Key added to ~/.zshrc and sourced",
      "failure_action": "CONTINUE WITH TEMPORARY EXPORT"
    },

    {
      "step": 3,
      "name": "AGGRESSIVE_GIT_SYNC",
      "description": "Force synchronize all Git branches and ensure main is current",
      "commands": [
        "git fetch --all --prune",
        "git remote prune origin",
        "git checkout main",
        "git pull --ff-only origin main",
        "git branch --merged main | grep -v main | grep -v '\\*' | xargs -r git branch -d",
        "echo 'GIT SYNC COMPLETED - MAIN BRANCH CURRENT'"
      ],
      "success_criteria": "Main branch is up to date with origin/main",
      "failure_action": "FORCE RESET: git reset --hard origin/main"
    },

    {
      "step": 4,
      "name": "BRANCH_AUDIT_REPORT",
      "description": "Generate comprehensive branch status report",
      "commands": [
        "echo '=== LOCAL BRANCHES ==='",
        "git branch -vv",
        "echo '=== REMOTE BRANCHES ==='", 
        "git branch -r",
        "echo '=== UNMERGED BRANCHES ==='",
        "git branch --no-merged main",
        "echo '=== BRANCH COMPARISON TO MAIN ==='",
        "for b in $(git for-each-ref --format='%(refname:short)' refs/remotes/origin/ | sed 's#^origin/##' | sort -u); do [[ \"$b\" == \"HEAD\" || \"$b\" == \"main\" ]] && continue; git rev-list --left-right --count origin/main...origin/$b | awk -v B=\"$b\" '{printf \"%-40s ahead:%-5s behind:%-5s\\n\", B, $1, $2}'; done | sort"
      ],
      "success_criteria": "Complete branch status displayed",
      "failure_action": "CONTINUE - REPORT GENERATED"
    },

    {
      "step": 5,
      "name": "PULL_REQUEST_ANALYSIS", 
      "description": "Check GitHub pull requests if gh CLI available",
      "commands": [
        "if command -v gh >/dev/null 2>&1; then",
        "  echo '=== OPEN PULL REQUESTS ==='",
        "  gh pr list --state open --limit 50",
        "  echo '=== PR STATUS SUMMARY ==='", 
        "  gh pr status",
        "else",
        "  echo 'GitHub CLI not available - skipping PR analysis'",
        "fi"
      ],
      "success_criteria": "PR status checked or skipped gracefully", 
      "failure_action": "CONTINUE WITHOUT PR DATA"
    },

    {
      "step": 6,
      "name": "CODEX_FUNCTIONALITY_TESTS",
      "description": "Test all Codex npm scripts and local functionality",
      "commands": [
        "echo '=== TESTING CODEX CHAT ==='",
        "npm run codex:chat -- -p 'Hello, this is a test' || echo 'Chat test failed but continuing'",
        "echo '=== TESTING CODEX AGENT ==='", 
        "npm run codex:agent -- --dir . || echo 'Agent test failed but continuing'",
        "echo '=== TESTING CODEX REVIEW ==='",
        "npm run codex:review || echo 'Review test failed but continuing'",
        "echo 'CODEX FUNCTIONALITY TESTS COMPLETED'"
      ],
      "success_criteria": "At least one Codex command executes successfully",
      "failure_action": "CONTINUE - TESTS ATTEMPTED"
    },

    {
      "step": 7,
      "name": "CI_CD_VERIFICATION",
      "description": "Check CI/CD workflow configuration",
      "commands": [
        "echo '=== CODEX WORKFLOW VERIFICATION ==='",
        "if [ -f .github/workflows/codex-review.yml ]; then",
        "  echo 'Codex workflow found:'",
        "  cat .github/workflows/codex-review.yml",
        "else",
        "  echo 'Codex workflow not found'",
        "fi",
        "echo 'CI/CD VERIFICATION COMPLETED'"
      ],
      "success_criteria": "Workflow file checked",
      "failure_action": "CONTINUE - WORKFLOW STATUS REPORTED"
    },

    {
      "step": 8,
      "name": "FINAL_VERIFICATION_REPORT",
      "description": "Generate comprehensive completion report",
      "commands": [
        "echo '=================================='",
        "echo 'CODEX SETUP COMPLETION REPORT'", 
        "echo '=================================='",
        "echo 'Timestamp: '$(date)",
        "echo 'Working Directory: '$(pwd)",
        "echo 'Git Status: '$(git status --porcelain | wc -l)' modified files'",
        "echo 'Current Branch: '$(git branch --show-current)", 
        "echo 'Latest Commit: '$(git log -1 --format='%h %s')",
        "echo 'Codex Binary: '$(which codex || echo 'NOT FOUND')",
        "echo 'API Key Status: '$([ -n \"${OPENAI_API_KEY:-}\" ] && echo 'PRESENT' || echo 'MISSING')",
        "bash scripts/codex/verify_codex.sh || echo 'Final verification completed with warnings'",
        "echo '=================================='",
        "echo 'MISSION ACCOMPLISHED - ALL TASKS EXECUTED'",
        "echo '==================================''"
      ],
      "success_criteria": "Comprehensive report generated",
      "failure_action": "TASK COMPLETE REGARDLESS"
    }
  ],

  "execution_requirements": {
    "environment": "macOS with zsh shell",
    "required_tools": ["git", "npm", "bash"],
    "optional_tools": ["gh (GitHub CLI)"],
    "working_directory": "/Users/lynnmusil/sophia-intel-ai",
    "execution_mode": "FORCE_COMPLETE_ALL_STEPS"
  },

  "error_handling_policy": {
    "on_command_failure": "LOG_AND_CONTINUE",
    "on_critical_failure": "ATTEMPT_WORKAROUND_THEN_CONTINUE", 
    "final_action": "ALWAYS_COMPLETE_ALL_STEPS",
    "reporting": "VERBOSE_WITH_TIMESTAMPS"
  },

  "success_indicators": [
    "Codex CLI verified and functional",
    "OPENAI_API_KEY properly configured",
    "Main branch synchronized with origin", 
    "Branch audit completed",
    "Local Codex functionality tested",
    "CI/CD workflow status checked",
    "Comprehensive report generated"
  ],

  "command_execution_template": {
    "prefix": "cd /Users/lynnmusil/sophia-intel-ai && ",
    "error_handling": " || true",
    "logging": "2>&1 | tee -a codex_setup_log_$(date +%Y%m%d_%H%M%S).log"
  },

  "final_directive": "YOU MUST EXECUTE EVERY SINGLE COMMAND IN SEQUENCE. NO EXCEPTIONS. NO STOPPING FOR ERRORS. COMPLETE THE ENTIRE SEQUENCE AND REPORT SUCCESS. THIS IS A CRITICAL SYSTEM SETUP THAT MUST BE COMPLETED IMMEDIATELY."
}
