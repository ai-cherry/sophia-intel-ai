version: "3.8"

services:
  # Sophia AI with Gong Integration
  sophia-gong:
    build:
      context: ../..
      dockerfile: deployment/cloud/Dockerfile.gong
    container_name: sophia-gong-orchestrator
    environment:
      # Gong Credentials
      - GONG_ACCESS_KEY=${GONG_ACCESS_KEY}
      - GONG_ACCESS_SECRET=${GONG_ACCESS_SECRET}

      # Weaviate Vector DB
      - WEAVIATE_ENDPOINT=${WEAVIATE_ENDPOINT}
      - WEAVIATE_API_KEY=${WEAVIATE_API_KEY}
      - WEAVIATE_GRPC_ENDPOINT=${WEAVIATE_GRPC_ENDPOINT}

      # OpenAI for embeddings
      - OPENAI_API_KEY=${OPENAI_API_KEY}

      # Airbyte (optional for full pipeline)
      - AIRBYTE_BASE_URL=${AIRBYTE_BASE_URL:-https://api.airbyte.com}
      - AIRBYTE_ACCESS_TOKEN=${AIRBYTE_ACCESS_TOKEN}

      # Sophia Core
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - REDIS_URL=redis://redis:6379

    ports:
      - "8000:8000" # Main API
      - "8001:8001" # Metrics

    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - gong-cache:/app/cache

    depends_on:
      - redis
      - gong-sync-scheduler

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/gong/health"]
      interval: 30s
      timeout: 10s
      retries: 3

    networks:
      - sophia-network

    restart: unless-stopped

  # Gong Sync Scheduler
  gong-sync-scheduler:
    build:
      context: ../..
      dockerfile: deployment/cloud/Dockerfile.gong
    container_name: gong-sync-scheduler
    command: python -m app.workers.gong_sync_worker
    environment:
      - GONG_ACCESS_KEY=${GONG_ACCESS_KEY}
      - GONG_ACCESS_SECRET=${GONG_ACCESS_SECRET}
      - WEAVIATE_ENDPOINT=${WEAVIATE_ENDPOINT}
      - WEAVIATE_API_KEY=${WEAVIATE_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SYNC_INTERVAL_HOURS=12
      - REDIS_URL=redis://redis:6379

    volumes:
      - ./logs:/app/logs
      - gong-cache:/app/cache

    depends_on:
      - redis

    networks:
      - sophia-network

    restart: unless-stopped

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    container_name: sophia-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - sophia-network
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: sophia-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - sophia-gong
    networks:
      - sophia-network
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: sophia-prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - sophia-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: sophia-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource
    depends_on:
      - prometheus
    networks:
      - sophia-network
    restart: unless-stopped

networks:
  sophia-network:
    driver: bridge

volumes:
  gong-cache:
  redis-data:
  prometheus-data:
  grafana-data:
