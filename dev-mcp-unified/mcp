#!/usr/bin/env python3
import argparse
import json
import os
import subprocess
import sys
from pathlib import Path

ROOT = Path(__file__).resolve().parent

def cmd_start(args):
    env = os.environ.copy()
    if args.index:
        env["MCP_INDEX_PATH"] = args.index
    if args.watch:
        env["MCP_WATCH"] = "true"
    uvicorn_cmd = [
        sys.executable,
        "-m",
        "uvicorn",
        "dev_mcp_unified.core.mcp_server:app",
        "--host","127.0.0.1","--port", str(args.port)
    ]
    return subprocess.call(uvicorn_cmd, env=env)

def cmd_status(args):
    import http.client
    try:
        conn = http.client.HTTPConnection("127.0.0.1", 3333, timeout=2)
        conn.request("GET","/healthz")
        res = conn.getresponse()
        print(res.status, res.reason)
        print(res.read().decode())
    except Exception as e:
        print(f"status error: {e}")
        return 1
    return 0

def cmd_query(args):
    import urllib.request
    data = {
        "task": args.task or "general",
        "question": " ".join(args.prompt) if args.prompt else "",
        "llm": args.llm,
        "file": args.file,
    }
    req = urllib.request.Request(
        "http://127.0.0.1:3333/query",
        data=json.dumps(data).encode(),
        headers={"Content-Type":"application/json"}
    )
    with urllib.request.urlopen(req, timeout=30) as resp:
        print(resp.read().decode())

def cmd_test(args):
    for provider in (["claude","qwen","openai","deepseek"] if args.which=="all" else [args.which]):
        print(f"Testing {provider}â€¦")
        ret = cmd_query(argparse.Namespace(task="generate_boilerplate", llm=provider, file=None, prompt=["hello world"]))
        if ret:
            return ret
    return 0

def main():
    p = argparse.ArgumentParser(prog="mcp", description="MCP Unified CLI")
    sub = p.add_subparsers(dest="cmd", required=True)

    s = sub.add_parser("start")
    s.add_argument("--port", type=int, default=3333)
    s.add_argument("--index", type=str, help="Path to index")
    s.add_argument("--watch", action="store_true")
    s.set_defaults(func=cmd_start)

    s = sub.add_parser("status")
    s.set_defaults(func=cmd_status)

    s = sub.add_parser("query")
    s.add_argument("--llm", choices=["claude","qwen","openai","deepseek"], required=False)
    s.add_argument("--task", type=str)
    s.add_argument("--file", type=str)
    s.add_argument("prompt", nargs=argparse.REMAINDER)
    s.set_defaults(func=cmd_query)

    s = sub.add_parser("test")
    s.add_argument("which", choices=["claude","qwen","openai","deepseek","all"], default="all")
    s.set_defaults(func=cmd_test)

    args = p.parse_args()
    sys.exit(args.func(args))

if __name__ == "__main__":
    main()

