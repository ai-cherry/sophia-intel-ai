version: '3.8'

services:
  # Enhanced Secret Management Dashboard
  sophia-secret-dashboard:
    build:
      context: .
      dockerfile: Dockerfile.enhanced
    ports:
      - "8080:8080"
    environment:
      - DASHBOARD_ENV=production
      - DASHBOARD_HOST=0.0.0.0
      - DASHBOARD_PORT=8080
      - DATABASE_URL=postgresql://sophia:sophia123@postgres:5432/sophia_secrets
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=sophia-production-secret-change-this
    depends_on:
      - postgres
      - redis
    volumes:
      - /opt/sophia/env:/app/env:ro
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://104.171.202.103:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sophia-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=sophia_secrets
      - POSTGRES_USER=sophia
      - POSTGRES_PASSWORD=sophia123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sophia -d sophia_secrets"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sophia-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sophia-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: always
    networks:
      - sophia-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=sophia123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    restart: always
    networks:
      - sophia-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  sophia-network:
    driver: bridge

