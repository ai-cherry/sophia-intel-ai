# ==============================================
# SOPHIA INTEL AI - LOCAL DEVELOPMENT ENVIRONMENT
# Real Services - No Mocks, Uses Real APIs + Local Services
# ==============================================

version: '3.8'

services:
  # ==============================================
  # LOCAL VECTOR DATABASE - Weaviate
  # ==============================================
  weaviate:
    image: semitechnologies/weaviate:1.26.1
    container_name: sophia-weaviate-local
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'  # We handle embeddings ourselves
      ENABLE_MODULES: 'text2vec-openai,text2vec-cohere,text2vec-huggingface,generative-openai'
      CLUSTER_HOSTNAME: 'node1'
    volumes:
      - weaviate_data:/var/lib/weaviate
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ==============================================  
  # LOCAL POSTGRESQL DATABASE
  # ==============================================
  postgres:
    image: postgres:16-alpine
    container_name: sophia-postgres-local
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: sophia
      POSTGRES_USER: sophia
      POSTGRES_PASSWORD: sophia_secure_password_2024
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-postgres.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sophia -d sophia"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==============================================
  # LOCAL REDIS CACHE (Fallback for Redis Cloud)
  # ==============================================
  redis:
    image: redis:7-alpine
    container_name: sophia-redis-local
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass sophia_redis_2024
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "sophia_redis_2024", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==============================================
  # UNIFIED API SERVER (Main Backend)
  # ==============================================
  unified-api:
    build:
      context: .
      dockerfile: Dockerfile.unified-api
    container_name: sophia-unified-api
    restart: unless-stopped
    ports:
      - "8003:8003"
    environment:
      # Load all environment variables from .env.local
      - NODE_ENV=development
      - DEBUG=true
      - LOG_LEVEL=debug
      - USE_REAL_APIS=true
      - FAIL_ON_MOCK_FALLBACK=true
      
      # Local service URLs
      - WEAVIATE_URL=http://weaviate:8080
      - POSTGRES_URL=postgresql://sophia:sophia_secure_password_2024@postgres:5432/sophia
      - REDIS_LOCAL_URL=redis://:sophia_redis_2024@redis:6379
      
    env_file:
      - .env.local
    depends_on:
      weaviate:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./app:/app:ro
      - ./pulumi:/pulumi:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ==============================================
  # AGNO BRIDGE (UI Bridge Server)
  # ==============================================
  agno-bridge:
    build:
      context: .
      dockerfile: Dockerfile.agno-bridge
    container_name: sophia-agno-bridge
    restart: unless-stopped
    ports:
      - "7777:7777"
    environment:
      - UNIFIED_API_URL=http://unified-api:8003
      - DEBUG=true
    env_file:
      - .env.local
    depends_on:
      unified-api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7777/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==============================================
  # MCP SERVER (Memory & Tool Management)  
  # ==============================================
  mcp-server:
    build:
      context: ./pulumi/mcp-server
      dockerfile: Dockerfile
    container_name: sophia-mcp-server
    restart: unless-stopped
    ports:
      - "8004:8004"
    environment:
      - MCP_SERVER_PORT=8004
      - WEAVIATE_URL=http://weaviate:8080
      - POSTGRES_URL=postgresql://sophia:sophia_secure_password_2024@postgres:5432/sophia
    env_file:
      - .env.local
    depends_on:
      weaviate:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./pulumi/mcp-server/src:/app/src:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==============================================
  # VECTOR STORE SERVICE (Embedding & Search)
  # ==============================================
  vector-store:
    build:
      context: ./pulumi/vector-store
      dockerfile: Dockerfile
    container_name: sophia-vector-store
    restart: unless-stopped
    ports:
      - "8005:8005"
    environment:
      - VECTOR_STORE_PORT=8005
      - WEAVIATE_URL=http://weaviate:8080
    env_file:
      - .env.local
    depends_on:
      weaviate:
        condition: service_healthy
    volumes:
      - ./pulumi/vector-store/src:/app/src:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==============================================
  # MONITORING - Prometheus (Optional)
  # ==============================================
  prometheus:
    image: prom/prometheus:latest
    container_name: sophia-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # ==============================================
  # MONITORING - Grafana (Optional)
  # ==============================================
  grafana:
    image: grafana/grafana:latest
    container_name: sophia-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=sophia_grafana_admin_2024
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro

# ==============================================
# PERSISTENT VOLUMES
# ==============================================
volumes:
  weaviate_data:
    driver: local
    name: sophia_weaviate_data
  postgres_data:
    driver: local  
    name: sophia_postgres_data
  redis_data:
    driver: local
    name: sophia_redis_data
  prometheus_data:
    driver: local
    name: sophia_prometheus_data
  grafana_data:
    driver: local
    name: sophia_grafana_data

# ==============================================
# NETWORKS
# ==============================================
networks:
  default:
    name: sophia_local_network
    driver: bridge