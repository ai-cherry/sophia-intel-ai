
services:
  # Core development shell for terminal-first workflows
  agent-dev:
    image: python:3.11-slim
    container_name: sophia-agent-dev
    working_dir: /workspace/sophia
    stdin_open: true
    tty: true
    command: /bin/bash
    # Secure API keys are loaded via host env when present
    environment:
      - SSH_AUTH_SOCK=${SSH_AUTH_SOCK}
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/workspace/sophia
    volumes:
      - ./:/workspace/sophia
      
      - ~/.ssh:/root/.ssh:ro
      - ${SSH_AUTH_SOCK}:${SSH_AUTH_SOCK}
    depends_on:
      - redis
      - weaviate
    networks:
      - multi-agent-net

  # Infrastructure: Redis
  redis:
    image: redis:7-alpine
    container_name: sophia-redis
    command: redis-server --appendonly yes
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - multi-agent-net

  # Infrastructure: Weaviate
  weaviate:
    image: semitechnologies/weaviate:latest
    container_name: sophia-weaviate
    ports:
      - "${WEAVIATE_REST_PORT:-8080}:8080"
      - "${WEAVIATE_GRPC_PORT:-50051}:50051"
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      ENABLE_MODULES: 'text2vec-openai,text2vec-cohere,text2vec-huggingface'
      CLUSTER_HOSTNAME: 'node1'
    volumes:
      - weaviate-data:/var/lib/weaviate
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - multi-agent-net

  # Infrastructure: Neo4j (Graph/Metadata tier for local dev)
  neo4j:
    image: neo4j:5.15-community
    container_name: sophia-neo4j
    ports:
      - "${NEO4J_HTTP_PORT:-7474}:7474"
      - "${NEO4J_BOLT_PORT:-7687}:7687"
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD:-dev-password-123}
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_memory_heap_initial__size=512M
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=1G
    volumes:
      - neo4j-data:/data
      - neo4j-logs:/logs
      - neo4j-import:/var/lib/neo4j/import
      - neo4j-plugins:/plugins
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD:-dev-password-123}", "RETURN 1"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - multi-agent-net

  # Postgres with pgvector (Alternative/Production graph tier)
  postgres:
    image: pgvector/pgvector:pg16
    container_name: sophia-postgres
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-sophia}
      - POSTGRES_USER=${POSTGRES_USER:-sophia}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-dev-password-123}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-sophia} -d ${POSTGRES_DB:-sophia}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - multi-agent-net

  # MCP Memory server (reuses existing Dockerfile paths from dev stack)
  mcp-memory:
    build:
      context: .
      dockerfile: automation/docker/Dockerfile.mcp-memory
      args:
        - PYTHON_VERSION=3.11
    container_name: sophia-mcp-memory
    ports:
      - "${MCP_MEMORY_PORT:-8081}:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - WEAVIATE_URL=http://weaviate:8080
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      - redis
      - weaviate
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - multi-agent-net

  # MCP Filesystem server for this repo
  mcp-filesystem-sophia:
    build:
      context: .
      dockerfile: automation/docker/Dockerfile.mcp-filesystem
      args:
        - PYTHON_VERSION=3.11
    container_name: sophia-mcp-fs-sophia
    environment:
      - WORKSPACE_PATH=/workspace/sophia
      - WORKSPACE_NAME=sophia
      - READ_ONLY=false
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./:/workspace/sophia
    ports:
      - "${MCP_FS_SOPHIA_PORT:-8082}:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - multi-agent-net

  

  # MCP Git server with SSH agent forwarding
  mcp-git:
    build:
      context: .
      dockerfile: automation/docker/Dockerfile.mcp-git
      args:
        - PYTHON_VERSION=3.11
    container_name: sophia-mcp-git
    environment:
      - SSH_AUTH_SOCK=${SSH_AUTH_SOCK}
      - GIT_USER_NAME=${GIT_USER_NAME:-Sophia AI Agent}
      - GIT_USER_EMAIL=${GIT_USER_EMAIL:-agent@sophia-intel.ai}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./:/workspace/sophia
      
      - ~/.ssh:/root/.ssh:ro
      - ${SSH_AUTH_SOCK}:${SSH_AUTH_SOCK}
    ports:
      - "${MCP_GIT_PORT:-8084}:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - multi-agent-net

  # Minimal Web UI placeholder (if Dockerfile exists)
  webui:
    build:
      context: .
      dockerfile: automation/docker/Dockerfile.webui
      args:
        - NODE_VERSION=18
    container_name: sophia-webui
    ports:
      - "${WEBUI_PORT:-3001}:3000"
    environment:
      - API_URL=http://swarm-orchestrator:8000
      - WEBSOCKET_URL=ws://swarm-orchestrator:8000/ws
      - MCP_FILESYSTEM_SOPHIA_URL=http://mcp-filesystem-sophia:8000
      - MCP_FILESYSTEM_ARTEMIS_URL=http://mcp-filesystem-artemis:8000
      - MCP_GIT_URL=http://mcp-git:8000
      - MCP_MEMORY_URL=http://mcp-memory:8000
      - NODE_ENV=development
    depends_on:
      - swarm-orchestrator
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - multi-agent-net

  # Swarm orchestrator placeholder (reuses existing Dockerfile)
  swarm-orchestrator:
    build:
      context: .
      dockerfile: automation/docker/Dockerfile.swarm
      args:
        - PYTHON_VERSION=3.11
    container_name: sophia-swarm
    ports:
      - "${SWARM_PORT:-8090}:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - MCP_MEMORY_URL=http://mcp-memory:8000
      - MCP_FS_SOPHIA_URL=http://mcp-filesystem-sophia:8000
      - MCP_FS_ARTEMIS_URL=http://mcp-filesystem-artemis:8000
      - MCP_GIT_URL=http://mcp-git:8000
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      - redis
      - mcp-memory
      - mcp-filesystem-sophia
      - mcp-filesystem-artemis
      - mcp-git
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - multi-agent-net

  # Async Indexer Service (background parsing, embedding, tagging)
  indexer:
    build:
      context: .
      dockerfile: automation/docker/Dockerfile.indexer
      args:
        - PYTHON_VERSION=3.11
    container_name: sophia-indexer
    environment:
      - REDIS_URL=redis://redis:6379
      - WEAVIATE_URL=http://weaviate:8080
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-dev-password-123}
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-sophia}:${POSTGRES_PASSWORD:-dev-password-123}@postgres:5432/${POSTGRES_DB:-sophia}
      - WORKSPACE_SOPHIA=/workspace/sophia
      - WORKSPACE_ARTEMIS=/workspace/artemis
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL:-sentence-transformers/all-MiniLM-L6-v2}
      - INDEXER_QUEUE=sophia-indexer
    volumes:
      - ./:/workspace/sophia:ro
      - ../artemis-cli:/workspace/artemis:ro
    depends_on:
      - redis
      - weaviate
      - neo4j
      - postgres
    networks:
      - multi-agent-net

networks:
  multi-agent-net:
    driver: bridge

volumes:
  redis-data:
  weaviate-data:
  postgres-data:
  neo4j-data:
  neo4j-logs:
  neo4j-import:
  neo4j-plugins:
