version: '3.9'

services:
  # ============================================
  # Vector Database - Weaviate
  # ============================================
  weaviate:
    image: semitechnologies/weaviate:1.32.1
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "50051:50051"  # gRPC port
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      ENABLE_MODULES: 'text2vec-openai,text2vec-cohere,text2vec-huggingface'
      CLUSTER_HOSTNAME: 'node1'
      LOG_LEVEL: 'info'
      GOMAXPROCS: '8'
      BACKUP_FILESYSTEM_PATH: '/var/lib/weaviate/backups'
    volumes:
      - weaviate_data:/var/lib/weaviate
      - weaviate_backups:/var/lib/weaviate/backups
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - sophia-network

  # ============================================
  # Cache Layer - Redis
  # ============================================
  redis:
    image: redis:8-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: >
      redis-server
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 60 1
      --save 300 10
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
    networks:
      - sophia-network

  # ============================================
  # GraphRAG Database - PostgreSQL
  # ============================================
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: sophia_intel
      POSTGRES_USER: sophia
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sophia_secure_password_2024}
      POSTGRES_INIT_DB_ARGS: "--encoding=UTF8"
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sophia -d sophia_intel"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - sophia-network

  # ============================================
  # Monitoring - Prometheus
  # ============================================
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - sophia-network

  # ============================================
  # Monitoring - Grafana
  # ============================================
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3005:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - sophia-network

  # ============================================
  # Background Tasks - Celery Worker
  # ============================================
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.api
      target: production
    restart: unless-stopped
    command: celery -A app.tasks.worker worker --loglevel=info --concurrency=4
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      WEAVIATE_URL: 'http://weaviate:8080'
      REDIS_URL: 'redis://redis:6379'
      POSTGRES_URL: 'postgresql://sophia:${POSTGRES_PASSWORD:-sophia_secure_password_2024}@postgres:5432/sophia_intel'
      SUPERMEMORY_DB: '/app/data/supermemory.db'
    volumes:
      - ./app:/app/app:ro
      - ./tmp:/app/tmp
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - redis
      - weaviate
      - postgres
    networks:
      - sophia-network

  # ============================================
  # API Server with Agent Orchestration
  # ============================================
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
      target: production
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Server Configuration
      ENVIRONMENT: production
      API_HOST: '0.0.0.0'
      AGENT_API_PORT: '8000'
      LOCAL_DEV_MODE: 'false'
      LOG_LEVEL: 'INFO'
      
      # Storage
      WEAVIATE_URL: 'http://weaviate:8080'
      REDIS_URL: 'redis://redis:6379'
      POSTGRES_URL: 'postgresql://sophia:${POSTGRES_PASSWORD:-sophia_secure_password_2024}@postgres:5432/sophia_intel'
      SUPERMEMORY_DB: '/app/data/supermemory.db'
      
      # MCP Servers
      MCP_FILESYSTEM: 'true'
      MCP_GIT: 'true'
      MCP_SUPERMEMORY: 'true'
      
      # Features
      GRAPHRAG_ENABLED: 'true'
      HYBRID_SEARCH_ENABLED: 'true'
      EVALUATION_GATES_ENABLED: 'true'
      METRICS_ENABLED: 'true'
      RATE_LIMIT_ENABLED: 'true'
      
      # API Keys (from .env file)
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
      PORTKEY_API_KEY: ${PORTKEY_API_KEY}
      TOGETHER_API_KEY: ${TOGETHER_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      AGNO_API_KEY: ${AGNO_API_KEY}
      
      # Celery
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    depends_on:
      weaviate:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./app:/app/app:ro
      - ./scripts:/app/scripts:ro
      - ./tmp:/app/tmp
      - ./data:/app/data
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - sophia-network

  # ============================================
  # Agno Bridge Server (Compatibility Layer)
  # ============================================
  agno-bridge:
    build:
      context: .
      dockerfile: Dockerfile.api
      target: production
    restart: unless-stopped
    ports:
      - "7777:7777"
    command: python -m app.agno_bridge
    environment:
      UNIFIED_API_URL: 'http://api:8000'
      AGNO_API_KEY: ${AGNO_API_KEY}
    depends_on:
      - api
    volumes:
      - ./app:/app/app:ro
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7777/v1/playground/status"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sophia-network

  # ============================================
  # UI Dashboard - Main
  # ============================================
  ui:
    build:
      context: ./ui
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: 'http://localhost:8000'
      NEXT_PUBLIC_AGNO_URL: 'http://localhost:7777'
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sophia-network

  # ============================================
  # UI Dashboard - Agent UI
  # ============================================
  agent-ui:
    build:
      context: ./agent-ui
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: 'http://localhost:8000'
      NEXT_PUBLIC_DEFAULT_ENDPOINT: 'http://localhost:7777'
      NEXT_PUBLIC_PLAYGROUND_URL: 'http://localhost:7777/v1/playground'
    depends_on:
      - agno-bridge
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sophia-network

  # ============================================
  # Nginx Reverse Proxy (Optional)
  # ============================================
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
      - ui
      - agent-ui
    networks:
      - sophia-network

# ============================================
# Volumes
# ============================================
volumes:
  weaviate_data:
    driver: local
  weaviate_backups:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ============================================
# Networks
# ============================================
networks:
  sophia-network:
    name: sophia-intel-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16