apiVersion: v1
kind: ConfigMap
metadata:
  name: ratelimit-config
  namespace: istio-system
data:
  config.yaml: |
    domain: sophia-artemis
    descriptors:
      # Global rate limiting - 1000 requests per minute per IP
      - key: remote_address
        rate_limit:
          unit: minute
          requests_per_unit: 1000

      # API endpoint rate limiting
      - key: header_match
        value: api-endpoint
        descriptors:
          - key: remote_address
            rate_limit:
              unit: minute
              requests_per_unit: 100

      # Artemis orchestrator rate limiting - 8 concurrent tasks
      - key: header_match
        value: artemis-orchestrator
        descriptors:
          - key: user_id
            rate_limit:
              unit: second
              requests_per_unit: 8

      # Sophia orchestrator rate limiting - 8 concurrent tasks
      - key: header_match
        value: sophia-orchestrator
        descriptors:
          - key: user_id
            rate_limit:
              unit: second
              requests_per_unit: 8

      # MCP server rate limiting
      - key: header_match
        value: mcp-server
        descriptors:
          - key: server_type
            rate_limit:
              unit: second
              requests_per_unit: 50

      # Heavy operations rate limiting
      - key: header_match
        value: heavy-operation
        descriptors:
          - key: operation_type
            rate_limit:
              unit: minute
              requests_per_unit: 10

      # WebSocket connections rate limiting
      - key: header_match
        value: websocket
        descriptors:
          - key: remote_address
            rate_limit:
              unit: hour
              requests_per_unit: 100
---
apiVersion: v1
kind: Service
metadata:
  name: ratelimit
  namespace: istio-system
  labels:
    app: ratelimit
spec:
  ports:
    - name: grpc
      port: 8081
      targetPort: 8081
      protocol: TCP
    - name: http-debug
      port: 6070
      targetPort: 6070
      protocol: TCP
  selector:
    app: ratelimit
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ratelimit
  namespace: istio-system
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ratelimit
  template:
    metadata:
      labels:
        app: ratelimit
        sidecar.istio.io/inject: "false"
    spec:
      containers:
        - name: ratelimit
          image: envoyproxy/ratelimit:v1.4.0
          command: ["/bin/ratelimit"]
          env:
            - name: LOG_LEVEL
              value: info
            - name: REDIS_SOCKET_TYPE
              value: tcp
            - name: REDIS_URL
              value: redis.cache.local:6379
            - name: USE_STATSD
              value: "false"
            - name: RUNTIME_ROOT
              value: /data
            - name: RUNTIME_SUBDIRECTORY
              value: ratelimit
            - name: RUNTIME_WATCH_ROOT
              value: "false"
            - name: RUNTIME_IGNOREDOTFILES
              value: "true"
            - name: GRPC_HOST
              value: "::"
            - name: GRPC_PORT
              value: "8081"
            - name: DEBUG_HOST
              value: "0.0.0.0"
            - name: DEBUG_PORT
              value: "6070"
          ports:
            - containerPort: 8081
              name: grpc
              protocol: TCP
            - containerPort: 6070
              name: debug
              protocol: TCP
          volumeMounts:
            - name: config-volume
              mountPath: /data/ratelimit/config
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 512Mi
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: 6070
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /healthcheck
              port: 6070
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: config-volume
          configMap:
            name: ratelimit-config
---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: artemis-ratelimit
  namespace: artemis-mesh
spec:
  workloadSelector:
    labels:
      app: artemis-orchestrator
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: SIDECAR_INBOUND
        listener:
          filterChain:
            filter:
              name: "envoy.filters.network.http_connection_manager"
              subFilter:
                name: "envoy.filters.http.router"
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.filters.http.ratelimit
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit
            domain: sophia-artemis
            failure_mode_deny: false
            timeout: 0.25s
            rate_limit_service:
              grpc_service:
                envoy_grpc:
                  cluster_name: rate_limit_cluster
                timeout: 0.25s
              transport_api_version: V3
            request_headers_to_add:
              - header:
                  key: x-ratelimit-domain
                  value: artemis
              - header:
                  key: x-ratelimit-orchestrator
                  value: "true"
---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: sophia-ratelimit
  namespace: sophia-mesh
spec:
  workloadSelector:
    labels:
      app: sophia-orchestrator
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: SIDECAR_INBOUND
        listener:
          filterChain:
            filter:
              name: "envoy.filters.network.http_connection_manager"
              subFilter:
                name: "envoy.filters.http.router"
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.filters.http.ratelimit
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit
            domain: sophia-artemis
            failure_mode_deny: false
            timeout: 0.25s
            rate_limit_service:
              grpc_service:
                envoy_grpc:
                  cluster_name: rate_limit_cluster
                timeout: 0.25s
              transport_api_version: V3
            request_headers_to_add:
              - header:
                  key: x-ratelimit-domain
                  value: sophia
              - header:
                  key: x-ratelimit-orchestrator
                  value: "true"
---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: ratelimit-cluster
  namespace: istio-system
spec:
  configPatches:
    - applyTo: CLUSTER
      match:
        context: SIDECAR_INBOUND
        cluster:
          name: rate_limit_cluster
      patch:
        operation: ADD
        value:
          name: rate_limit_cluster
          type: STRICT_DNS
          connect_timeout: 0.25s
          lb_policy: ROUND_ROBIN
          protocol_selection: USE_CONFIGURED_PROTOCOL
          http2_protocol_options: {}
          load_assignment:
            cluster_name: rate_limit_cluster
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: ratelimit.istio-system.svc.cluster.local
                          port_value: 8081
---
# Adaptive concurrency control for Artemis
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: artemis-adaptive-concurrency
  namespace: artemis-mesh
spec:
  workloadSelector:
    labels:
      app: artemis-orchestrator
  configPatches:
    - applyTo: HTTP_ROUTE
      match:
        context: SIDECAR_INBOUND
        listener:
          filterChain:
            filter:
              name: "envoy.filters.network.http_connection_manager"
      patch:
        operation: MERGE
        value:
          route:
            timeout: 30s
            retry_policy:
              num_retries: 3
              retry_on: "5xx,reset,connect-failure,refused-stream"
              per_try_timeout: 10s
            request_headers_to_add:
              - header:
                  key: x-concurrency-limit
                  value: "8"
---
# Adaptive concurrency control for Sophia
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: sophia-adaptive-concurrency
  namespace: sophia-mesh
spec:
  workloadSelector:
    labels:
      app: sophia-orchestrator
  configPatches:
    - applyTo: HTTP_ROUTE
      match:
        context: SIDECAR_INBOUND
        listener:
          filterChain:
            filter:
              name: "envoy.filters.network.http_connection_manager"
      patch:
        operation: MERGE
        value:
          route:
            timeout: 45s
            retry_policy:
              num_retries: 3
              retry_on: "5xx,reset,connect-failure,refused-stream"
              per_try_timeout: 15s
            request_headers_to_add:
              - header:
                  key: x-concurrency-limit
                  value: "8"
---
# Global rate limiting for ingress gateway
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: ingress-global-ratelimit
  namespace: istio-system
spec:
  workloadSelector:
    labels:
      istio: ingressgateway
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: GATEWAY
        listener:
          filterChain:
            filter:
              name: "envoy.filters.network.http_connection_manager"
              subFilter:
                name: "envoy.filters.http.router"
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.filters.http.ratelimit
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit
            domain: sophia-artemis
            failure_mode_deny: false
            timeout: 0.25s
            rate_limit_service:
              grpc_service:
                envoy_grpc:
                  cluster_name: rate_limit_cluster
                timeout: 0.25s
              transport_api_version: V3
            rate_limits:
              - actions:
                  - remote_address: {}
              - actions:
                  - request_headers:
                      header_name: ":path"
                      descriptor_key: path
              - actions:
                  - request_headers:
                      header_name: "x-user-id"
                      descriptor_key: user_id
---
# Local rate limiting for services
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: local-ratelimit
  namespace: artemis-mesh
spec:
  workloadSelector:
    labels:
      ratelimit: local
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: SIDECAR_INBOUND
        listener:
          filterChain:
            filter:
              name: "envoy.filters.network.http_connection_manager"
              subFilter:
                name: "envoy.filters.http.router"
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.filters.http.local_ratelimit
          typed_config:
            "@type": type.googleapis.com/udpa.type.v1.TypedStruct
            type_url: type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit
            value:
              stat_prefix: http_local_rate_limiter
              token_bucket:
                max_tokens: 100
                tokens_per_fill: 100
                fill_interval: 60s
              filter_enabled:
                runtime_key: local_rate_limit_enabled
                default_value:
                  numerator: 100
                  denominator: HUNDRED
              filter_enforced:
                runtime_key: local_rate_limit_enforced
                default_value:
                  numerator: 100
                  denominator: HUNDRED
              response_headers_to_add:
                - header:
                    key: x-local-rate-limit
                    value: "true"
