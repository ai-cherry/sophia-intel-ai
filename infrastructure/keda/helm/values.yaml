# Default values for sophia-intel-keda
# This is a production-ready configuration for KEDA autoscaling

# Global configuration
global:
  environment: production
  namespace: keda-system
  labels:
    app: sophia-intel-ai
    component: autoscaling
    managed-by: helm
  annotations:
    "istio-injection": "disabled" # KEDA should not have Istio sidecar
    "prometheus.io/scrape": "true"

# KEDA operator configuration
keda:
  enabled: true
  namespace: keda-system

  # Resource limits for KEDA operator
  resources:
    operator:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 100m
        memory: 128Mi
    metricsApiServer:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 100m
        memory: 128Mi
    webhooks:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 50m
        memory: 64Mi

  # Prometheus metrics configuration
  prometheus:
    metricServer:
      enabled: true
      port: 8080
      path: /metrics
    serviceMonitor:
      enabled: true
      namespace: monitoring
      interval: 30s
      scrapeTimeout: 10s

  # Logging configuration
  logging:
    operator:
      level: info
      format: json
      timestamp: true
    metricServer:
      level: info
      format: json

  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 1000
    capabilities:
      drop:
        - ALL

  # Health checks
  healthChecks:
    enabled: true
    readinessProbe:
      httpGet:
        path: /readyz
        port: 8081
      initialDelaySeconds: 5
      periodSeconds: 10
    livenessProbe:
      httpGet:
        path: /healthz
        port: 8081
      initialDelaySeconds: 15
      periodSeconds: 20

# Circuit breaker configuration
circuitBreaker:
  enabled: true
  maxScaleEventsPerMinute: 3
  fallbackToHPA: true
  cooldownPeriod: 60s
  errorThreshold: 5
  resetTimeout: 120s

# Scalers configuration
scalers:
  # Sophia Redis List Scaler
  sophia:
    enabled: true
    type: redis
    metadata:
      listName: sophia:task:queue
      listLength: "10" # Target queue length per replica
      activationListLength: "5" # Minimum queue length to activate scaling
      host: redis.sophia-system.svc.cluster.local
      port: "6379"
      database: "0"
      enableTLS: "false"
    authenticationRef:
      name: redis-auth
      namespace: sophia-system
    pollingInterval: 10
    cooldownPeriod: 30
    minReplicaCount: 2
    maxReplicaCount: 50
    advanced:
      horizontalPodAutoscalerConfig:
        behavior:
          scaleDown:
            stabilizationWindowSeconds: 60
            policies:
              - type: Percent
                value: 50
                periodSeconds: 60
              - type: Pods
                value: 2
                periodSeconds: 60
            selectPolicy: Min
          scaleUp:
            stabilizationWindowSeconds: 0
            policies:
              - type: Percent
                value: 100
                periodSeconds: 15
              - type: Pods
                value: 4
                periodSeconds: 15
            selectPolicy: Max

  # Sophia Prometheus Scaler
  sophia:
    enabled: true
    type: prometheus
    metadata:
      serverAddress: http://prometheus.monitoring.svc.cluster.local:9090
      metricName: sophia_analytics_processing_rate
      threshold: "100" # Target processing rate per replica
      activationThreshold: "50" # Minimum rate to activate scaling
      query: |
        sum(rate(sophia_analytics_events_processed_total[1m]))
    authenticationRef:
      name: prometheus-auth
      namespace: sophia-system
    pollingInterval: 15
    cooldownPeriod: 45
    minReplicaCount: 3
    maxReplicaCount: 100
    advanced:
      horizontalPodAutoscalerConfig:
        behavior:
          scaleDown:
            stabilizationWindowSeconds: 90
            policies:
              - type: Percent
                value: 30
                periodSeconds: 60
              - type: Pods
                value: 1
                periodSeconds: 90
            selectPolicy: Min
          scaleUp:
            stabilizationWindowSeconds: 0
            policies:
              - type: Percent
                value: 200
                periodSeconds: 15
              - type: Pods
                value: 5
                periodSeconds: 15
            selectPolicy: Max

  # Cron Scaler for predictable patterns
  aiWorkloadCron:
    enabled: true
    type: cron
    metadata:
      # Business hours scaling (PST/PDT)
      timezone: America/Los_Angeles
      schedules:
        - name: business-hours-weekday
          start: "0 8 * * 1-5" # 8 AM Monday-Friday
          end: "0 18 * * 1-5" # 6 PM Monday-Friday
          desiredReplicas: "20"
        - name: peak-hours
          start: "0 10 * * 1-5" # 10 AM Monday-Friday
          end: "0 14 * * 1-5" # 2 PM Monday-Friday
          desiredReplicas: "30"
        - name: after-hours
          start: "0 18 * * 1-5" # 6 PM Monday-Friday
          end: "0 8 * * 1-5" # 8 AM next day Monday-Friday
          desiredReplicas: "5"
        - name: weekend
          start: "0 0 * * 0,6" # Midnight Saturday-Sunday
          end: "0 0 * * 1" # Midnight Monday
          desiredReplicas: "3"
    minReplicaCount: 2
    maxReplicaCount: 30

# Monitoring configuration
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    namespace: monitoring
    labels:
      prometheus: kube-prometheus
  prometheusRules:
    enabled: true
    namespace: monitoring
    rules:
      - alert: KEDAScalerErrors
        expr: rate(keda_scaler_errors_total[5m]) > 0.1
        for: 5m
        labels:
          severity: warning
          component: keda
        annotations:
          summary: "KEDA scaler errors detected"
          description: "KEDA scaler {{ $labels.scaler }} is experiencing errors ({{ $value }} errors/sec)"
      - alert: KEDAScaleEventsHigh
        expr: rate(keda_scaled_object_events_total[1m]) > 3
        for: 2m
        labels:
          severity: critical
          component: keda
        annotations:
          summary: "High KEDA scaling events - circuit breaker may activate"
          description: "KEDA is generating {{ $value }} scale events per minute, approaching circuit breaker limit"
      - alert: KEDAMetricsServerDown
        expr: up{job="keda-metrics-apiserver"} == 0
        for: 5m
        labels:
          severity: critical
          component: keda
        annotations:
          summary: "KEDA Metrics Server is down"
          description: "KEDA Metrics Server has been down for more than 5 minutes"

# Security configuration
security:
  rbac:
    create: true
    serviceAccount:
      create: true
      name: keda-operator
      annotations:
        eks.amazonaws.com/role-arn: "" # AWS IRSA if needed
  networkPolicy:
    enabled: true
    policyTypes:
      - Ingress
      - Egress
    ingress:
      - from:
          - namespaceSelector:
              matchLabels:
                name: sophia-system
          - namespaceSelector:
              matchLabels:
                name: sophia-system
          - namespaceSelector:
              matchLabels:
                name: monitoring
    egress:
      - to:
          - namespaceSelector:
              matchLabels:
                name: sophia-system
        ports:
          - protocol: TCP
            port: 6379 # Redis
      - to:
          - namespaceSelector:
              matchLabels:
                name: monitoring
        ports:
          - protocol: TCP
            port: 9090 # Prometheus
      - to:
          - namespaceSelector: {}
        ports:
          - protocol: TCP
            port: 443 # Kubernetes API
          - protocol: TCP
            port: 53 # DNS
          - protocol: UDP
            port: 53 # DNS

# External secrets configuration
externalSecrets:
  enabled: true
  backend: kubernetes # Can be vault, aws-secrets-manager, etc.
  refreshInterval: 15m
  secrets:
    - name: redis-auth
      namespace: sophia-system
      data:
        - key: password
          remoteRef:
            key: redis/sophia
            property: password
    - name: prometheus-auth
      namespace: sophia-system
      data:
        - key: token
          remoteRef:
            key: prometheus/sophia
            property: bearer-token

# Performance tuning
performance:
  # Optimize for 85% reduction in scaling time (60s to 9s)
  scalingModifiers:
    formula: "desired_replicas + ceil(desired_replicas * 0.1)" # Add 10% buffer
  metricsCacheDuration: 10s
  scalerCheckInterval: 10s

# Feature flags
features:
  httpScaling: true
  cpuMemoryScaling: false # Disabled in favor of custom metrics
  pausedAutoscaling: false
  scalingModifiers: true

# Rollback configuration
rollback:
  enabled: true
  preserveHPA: true # Keep HPA configs for fallback
  snapshotBeforeUpgrade: true
  maxHistory: 5
