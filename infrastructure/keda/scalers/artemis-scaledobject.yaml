apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: artemis-scaler
  namespace: artemis-system
  labels:
    app: artemis
    component: task-processing
    scaler-type: redis-list
    managed-by: keda
  annotations:
    # Circuit breaker configuration
    keda.sh/circuit-breaker-enabled: "true"
    keda.sh/max-scale-events: "3"
    keda.sh/max-scale-events-window: "60s"
    keda.sh/fallback-to-hpa: "true"
    # Monitoring annotations
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    # Deployment tracking
    deployment.timestamp: "{{ .Values.deploymentTimestamp }}"
    deployment.version: "{{ .Values.global.version }}"
spec:
  scaleTargetRef:
    name: artemis-worker
    kind: Deployment
    apiVersion: apps/v1

  # Polling and cooldown configuration for fast scaling (target: 9s)
  pollingInterval: 10
  cooldownPeriod: 30
  idleReplicaCount: 0 # Scale to zero when idle
  minReplicaCount: 2 # Minimum replicas for availability
  maxReplicaCount: 50 # Maximum replicas for safety

  # Advanced HPA configuration for fine-tuned scaling behavior
  advanced:
    restoreToOriginalReplicaCount: false
    horizontalPodAutoscalerConfig:
      name: artemis-hpa
      behavior:
        scaleDown:
          stabilizationWindowSeconds: 60
          policies:
            - type: Percent
              value: 50
              periodSeconds: 60
            - type: Pods
              value: 2
              periodSeconds: 60
          selectPolicy: Min # Choose the policy that scales down the least
        scaleUp:
          stabilizationWindowSeconds: 0 # No delay for scale up
          policies:
            - type: Percent
              value: 100
              periodSeconds: 15
            - type: Pods
              value: 4
              periodSeconds: 15
          selectPolicy: Max # Choose the policy that scales up the most
      metrics:
        - type: External
          external:
            metric:
              name: redis_list_length
              selector:
                matchLabels:
                  queue: artemis-task-queue
            target:
              type: AverageValue
              averageValue: "10" # Target queue length per replica

  # Redis List Length Trigger
  triggers:
    - type: redis
      metadata:
        # Redis connection configuration
        host: redis.artemis-system.svc.cluster.local
        port: "6379"
        database: "0"
        enableTLS: "false"

        # List configuration
        listName: artemis:task:queue
        listLength: "10" # Target queue length per replica
        activationListLength: "5" # Minimum queue length to activate scaling

        # Connection pool settings for performance
        connectionTimeout: "10"
        responseTimeout: "5"
        poolSize: "10"

        # Metrics configuration
        metricName: artemis_redis_queue_length
      authenticationRef:
        - parameter: password
          name: redis-auth
          key: password

  # Fallback configuration if circuit breaker triggers
  fallback:
    failureThreshold: 3
    replicas: 10 # Fallback to 10 replicas on failure
---
# TriggerAuthentication for Redis
apiVersion: keda.sh/v1alpha1
kind: TriggerAuthentication
metadata:
  name: redis-auth
  namespace: artemis-system
  labels:
    app: artemis
    component: authentication
spec:
  secretTargetRef:
    - parameter: password
      name: redis-credentials
      key: password
---
# ConfigMap for additional Artemis scaling configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: artemis-scaling-config
  namespace: artemis-system
  labels:
    app: artemis
    component: scaling-configuration
data:
  # Scaling thresholds and parameters
  scale.up.threshold: "20"
  scale.down.threshold: "5"
  scale.up.rate: "200" # Percentage increase
  scale.down.rate: "50" # Percentage decrease

  # Queue processing metrics
  target.processing.rate: "100" # Tasks per second per replica
  max.queue.length: "1000" # Maximum allowed queue length before alert

  # Performance tuning
  worker.concurrency: "10" # Concurrent tasks per worker
  worker.prefetch: "5" # Number of tasks to prefetch

  # Circuit breaker settings
  circuit.breaker.error.threshold: "5"
  circuit.breaker.reset.timeout: "120"
  circuit.breaker.half.open.requests: "3"
