{
  "type": "code_change",
  "version": "2.0",
  "files": [
    {
      "action": "create",
      "file": "app/swarms/scout/prefetch.py",
      "content": "from __future__ import annotations\n\nfrom pathlib import Path\nfrom typing import Any, List\n\nfrom app.mcp.clients.stdio_client import StdioMCPClient\nfrom app.memory.unified_memory_router import DocChunk, MemoryDomain, get_memory_router\n\n\nasync def prefetch_and_index(repo_root: str = \".\", max_files: int = 50, max_bytes_per_file: int = 20000) -> dict[str, Any]:\n    \"\"\"Prefetch a small sample of repository files and index into memory.\n\n    - Uses stdio MCP to list/read files (bounded)\n    - Generates lightweight DocChunks and upserts to L2 (Weaviate) if available\n    - Falls back to storing a brief summary in L1 if vectors unavailable\n    \"\"\"\n    client = StdioMCPClient(Path.cwd())\n    router = get_memory_router()\n\n    listing = client.repo_index(root=repo_root, max_bytes_per_file=max_bytes_per_file)\n    files: List[str] = []\n    for it in (listing.get(\"files\") if isinstance(listing, dict) else []) or []:\n        p = it.get(\"path\")\n        if p and p.endswith((\".py\", \".md\", \".ts\", \".tsx\")) and \"/node_modules/\" not in p:\n            files.append(p)\n        if len(files) >= max_files:\n            break\n\n    chunks: List[DocChunk] = []\n    for p in files:\n        try:\n            fr = client.fs_read(p, max_bytes=max_bytes_per_file)\n            content = fr.get(\"content\", \"\") if isinstance(fr, dict) else str(fr)\n            if not content:\n                continue\n            chunks.append(\n                DocChunk(\n                    content=content[: max_bytes_per_file],\n                    source_uri=f\"file://{p}\",\n                    domain=MemoryDomain.ARTEMIS,\n                    metadata={\"prefetch\": True, \"path\": p},\n                    confidence=0.9,\n                )\n            )\n        except Exception:\n            continue\n\n    try:\n        report = await router.upsert_chunks(chunks, MemoryDomain.ARTEMIS)\n        return {\"ok\": True, \"upserted\": report.chunks_stored, \"processed\": report.chunks_processed}\n    except Exception as e:\n        client.memory_add(\n            topic=\"scout_prefetch_summary\",\n            content=f\"Prefetched {len(chunks)} files for context.\",\n            source=\"artemis-run\",\n            tags=[\"scout\", \"prefetch\", \"fallback\"],\n            memory_type=\"semantic\",\n        )\n        return {\"ok\": False, \"error\": str(e), \"fallback\": True, \"files\": len(chunks)}\n"
    }
  ],
  "tests": ["python3 -c \"print(1)\""]
}
