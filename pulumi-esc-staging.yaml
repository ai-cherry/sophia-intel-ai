# Pulumi ESC Environment: sophia-intel-ai-staging
# Generated from .env files
# Contains 448 secrets

{
  "values": {
    "ai_providers": {
      "portkey_vk_deepseek": {
        "fn::secret": "deepseek-vk-24102f"
      },
      "portkey_vk_openai": {
        "fn::secret": "openai-vk-190a60"
      },
      "portkey_vk_anthropic": {
        "fn::secret": "anthropic-vk-b42804"
      },
      "portkey_vk_perplexity": {
        "fn::secret": "perplexity-vk-56c172"
      },
      "portkey_vk_groq": {
        "fn::secret": "groq-vk-6b9b52"
      },
      "portkey_vk_mistral": {
        "fn::secret": "mistral-vk-f92861"
      },
      "portkey_vk_xai": {
        "fn::secret": "xai-vk-e65d0f"
      },
      "portkey_vk_together": {
        "fn::secret": "together-ai-670469"
      },
      "portkey_vk_cohere": {
        "fn::secret": "cohere-vk-496fa9"
      },
      "anthropic_beta_version": {
        "fn::secret": "bedrock-2023-05-31"
      },
      "deepseek_base_url": {
        "fn::secret": "https://api.deepseek.com/v1"
      },
      "openai_api_key": {
        "fn::secret": "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"
      },
      "anthropic_api_key": {
        "fn::secret": "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"
      },
      "gemini_api_key": {
        "fn::secret": "AIzaSyA0rewcfUHo87WMEz4a8Og1eAWTslxlgEE"
      },
      "groq_api_key": {
        "fn::secret": "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"
      },
      "deepseek_api_key": {
        "fn::secret": "sk-c8a5f1725d7b4f96b29a3d041848cb74"
      },
      "mistral_api_key": {
        "fn::secret": "jCGVZEeBzppPH0pPVL0vxRCPnZuWL90i"
      },
      "grok_api_key": {
        "fn::secret": "xai-4WmKCCbqXhuxL56tfrCxaqs3N84fcLVirQG0NIb0NB6ViDPnnvr3vsYOBwpPKpPMzW5UMuHqf1kv87m3"
      },
      "xai_api_key": {
        "fn::secret": "xai-4WmKCCbqXhuxL56tfrCxaqs3N84fcLVirQG0NIb0NB6ViDPnnvr3vsYOBwpPKpPMzW5UMuHqf1kv87m3"
      },
      "together_ai_api_key": {
        "fn::secret": "tgp_v1_HE_uluFh-fELZDmEP9xKZXuSBT4a8EHd6s9CmSe5WWo"
      },
      "perplexity_api_key": {
        "fn::secret": "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"
      },
      "huggingface_api_token": {
        "fn::secret": "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"
      },
      "openai_api_key: optional[secretstr]": {
        "fn::secret": "Field(None, env=\"OPENAI_API_KEY\")"
      },
      "openai_org_id: optional[str]": {
        "fn::secret": "Field(None, env=\"OPENAI_ORG_ID\")"
      },
      "openai_base_url: optional[str]": {
        "fn::secret": "Field(\"https://api.openai.com/v1\", env=\"OPENAI_BASE_URL\")"
      },
      "anthropic_api_key: optional[secretstr]": {
        "fn::secret": "Field(None, env=\"ANTHROPIC_API_KEY\")"
      },
      "anthropic_base_url: optional[str]": {
        "fn::secret": "Field(\"https://api.anthropic.com\", env=\"ANTHROPIC_BASE_URL\")"
      },
      "together_api_key: optional[secretstr]": {
        "fn::secret": "Field(None, env=\"TOGETHER_API_KEY\")"
      },
      "together_base_url: optional[str]": {
        "fn::secret": "Field(\"https://api.together.xyz/v1\", env=\"TOGETHER_BASE_URL\")"
      },
      # No direct Google Gemini; use OpenRouter/AIMLAPI/Together/HF
      "claude_assistant_id": {
        "fn::secret": "claude-desktop"
      },
      "vk_together": {
        "fn::secret": "your_together_virtual_key_here"
      },
      "openai_base_url": {
        "fn::secret": "https://api.portkey.ai/v1"
      }
    },
    "business_integrations": {
      "slack_app_token": {
        "fn::secret": "xapp-1-A09EH9DKDPX-9500784360276-673c418f1ec0778483b4e1676529dc040cc1917e644b34536d3565a8de21efaa"
      },
      "slack_client_id": {
        "fn::secret": "293968207940.84057706630910663091"
      },
      "slack_client_secret": {
        "fn::secret": "778e2fb5b026f97587210602acfe1e0b"
      },
      "slack_refresh_token": {
        "fn::secret": "xoxe-1-My0xLTI5Mzk2ODIwNzk0MC04NDI5MzkxMDk3NzI4LTgzOTIwNDIxNTQzNTktODlkNTI0YmI4ZDQ4MGNlMWMxNTNkMzUwMzBiMGFkNTNlYzZjYzljYTM5Mzc2YmZjMmQ1Y2Y2YWM5NDFjZWYyNw"
      },
      "slack_signing_secret": {
        "fn::secret": "f06e529023c037b556159eef897f2cd6"
      },
      "slack_socket_token": {
        "fn::secret": "xapp-1-A09EH9DKDPX-9500784360276-673c418f1ec0778483b4e1676529dc040cc1917e644b34536d3565a8de21efaa"
      },
      "slack_verification_token": {
        "fn::secret": "8yhl8QLHfeXrQwSpYZcl0fEi"
      },
      "slack_api_token": {
        "fn::secret": "xoxp-YOUR_SLACK_USER_TOKEN"
      },
      "slack_user_token": {
        "fn::secret": "xoxp-YOUR_SLACK_USER_TOKEN"
      },
      "slack_bot_token": {
        "fn::secret": "xoxb-293968207940-9492433757667-YAplHFRnTfeV6UCaY7gWLCIo"
      },
      "slack_webhook_secret": {
        "fn::secret": "YOUR_SLACK_WEBHOOK_SECRET"
      },
      "gong_access_key": {
        "fn::secret": "TV33BPZ5UN45QKZCZ2UCAKRXHQ6Q3L5N"
      },
      "gong_client_secret": {
        "fn::secret": "eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjIwNTQxNTA4ODUsImFjY2Vzc0tleSI6IlRWMzNCUFo1VU40NVFLWkNaMlVDQUtSWEhRNlEzTDVOIn0.zgPvDQQIvU1kvF_9ctjcKuqC5xKhlpZo7MH5v7AYufU"
      },
      "gong_webhook_secret": {
        "fn::secret": "YOUR_GONG_WEBHOOK_SECRET"
      },
      "gong_api_url": {
        "fn::secret": "https://api.gong.io/v2"
      },
      "salesforce_client_id": {
        "fn::secret": "YOUR_SALESFORCE_CLIENT_ID"
      },
      "salesforce_client_secret": {
        "fn::secret": "YOUR_SALESFORCE_CLIENT_SECRET"
      },
      "salesforce_access_token": {
        "fn::secret": "6Cel800DDn000006Cu0y888Ux0000000MrlQC4spG19TPoqHKbMqJgoE535XYy6jdku0a8STJwI45vcRKiu1gsfm4TtDKbtZKXEBchnXJbw"
      },
      "salesforce_refresh_token": {
        "fn::secret": "YOUR_SALESFORCE_REFRESH_TOKEN"
      },
      "salesforce_instance_url": {
        "fn::secret": "https://YOUR_INSTANCE.salesforce.com"
      },
      "hubspot_api_key": {
        "fn::secret": "pat-na1-c1671bea-646a-4a61-a2da-33bd33528dc7"
      },
      "hubspot_access_token": {
        "fn::secret": "pat-na1-c1671bea-646a-4a61-a2da-33bd33528dc7"
      },
      "hubspot_api_token": {
        "fn::secret": "pat-na1-c1671bea-646a-4a61-a2da-33bd33528dc7"
      },
      "hubspot_app_id": {
        "fn::secret": "YOUR_HUBSPOT_APP_ID"
      },
      "hubspot_client_id": {
        "fn::secret": "YOUR_HUBSPOT_CLIENT_ID"
      },
      "hubspot_client_secret": {
        "fn::secret": "6080317b-15f9-4a73-b151-a0731616ca50"
      },
      "looker_client_id": {
        "fn::secret": "YOUR_LOOKER_CLIENT_ID"
      },
      "looker_client_secret": {
        "fn::secret": "kXxhgscT87fstFBcPRTNj733"
      },
      "looker_base_url": {
        "fn::secret": "https://YOUR_INSTANCE.looker.com"
      },
      "linear_api_key": {
        "fn::secret": "lin_api_gF8bCZPVYz02YKUGp1yqqkGJOnJ6XICaK2bdftIp"
      },
      "asana_api_token": {
        "fn::secret": "2/1202141391816423/1210641884736129:b164f0c8b881738b617e46065c4b9291"
      },
      "asana_pat_token": {
        "fn::secret": "2/1202141391816423/1210641884736129:b164f0c8b881738b617e46065c4b9291"
      },
      "airtable_api_key": {
        "fn::secret": "patuojzcFCHtcwkH3.2d1b20fd467f58319534f2abb02899d32390e1db02ffa226aa08c084bd21ce5d"
      },
      "airtable_api_token": {
        "fn::secret": "patuojzcFCHtcwkH3.2d1b20fd467f58319534f2abb02899d32390e1db02ffa226aa08c084bd21ce5d"
      },
      "airtable_base_id": {
        "fn::secret": "appYOUR_BASE_ID"
      },
      "airtable_table_name": {
        "fn::secret": "YOUR_TABLE_NAME"
      },
      "netsuite_auth_method": {
        "fn::secret": "oauth2"
      },
      "netsuite_account_id": {
        "fn::secret": "YOUR_ACCOUNT_ID"
      },
      "netsuite_application_id": {
        "fn::secret": "YOUR_APP_ID"
      },
      "netsuite_consumer_key": {
        "fn::secret": "YOUR_CONSUMER_KEY"
      },
      "netsuite_consumer_secret": {
        "fn::secret": "YOUR_CONSUMER_SECRET"
      },
      "netsuite_token_id": {
        "fn::secret": "YOUR_TOKEN_ID"
      },
      "netsuite_token_secret": {
        "fn::secret": "YOUR_TOKEN_SECRET"
      },
      "slack_enabled": {
        "fn::secret": "false"
      },
      "asana_enabled": {
        "fn::secret": "true"
      },
      "linear_enabled": {
        "fn::secret": "false"
      },
      "linear_team_id": {
        "fn::secret": "YOUR-TEAM-ID"
      },
      "airtable_enabled": {
        "fn::secret": "false"
      },
      "asana_pat": {
        "fn::secret": "2/1210550650060115/1211296760092597:af91983306d2e9169c1dad4dcff59b8e"
      },
      "airtable_access_token": {
        "fn::secret": "patuojzcFCHtcwkH3.2d1b20fd467f58319534f2abb02899d32390e1db02ffa226aa08c084bd21ce5d"
      },
      "airtable_table_ids": {
        "fn::secret": "tblbSL8gS3oSShkTs,tbl1Qkk3AEx3PQhLL"
      }
    },
    "databases": {
      "redis_url": {
        "fn::secret": "redis://localhost:6379"
      },
      "postgres_url": {
        "fn::secret": "postgresql://sophia:password@localhost:5432/sophia"
      },
      "weaviate_url": {
        "fn::secret": "http://localhost:8080"
      },
      "next_public_weaviate_url": {
        "fn::secret": "http://localhost:8080"
      },
      "portkey_vk_qdrant": {
        "fn::secret": "qdrant-vk-d2b62a"
      },
      "weaviate_api_key": {
        "fn::secret": "VMKjGMQUnXQIDiFOciZZOhr7amBfCHMh7hNf"
      },
      "weaviate_admin_api_key": {
        "fn::secret": "VMKjGMQUnXQIDiFOciZZOhr7amBfCHMh7hNf"
      },
      "weaviate_rest_endpoint": {
        "fn::secret": "w6bigpoxsrwvq7wlgmmdva.c0.us-west3.gcp.weaviate.cloud"
      },
      "weaviate_grpc_endpoint": {
        "fn::secret": "grpc-w6bigpoxsrwvq7wlgmmdva.c0.us-west3.gcp.weaviate.cloud"
      },
      "weaviate_local_url": {
        "fn::secret": "http://localhost:8081"
      },
      "qdrant_api_key": {
        "fn::secret": "2d196a4d-a80f-4846-be65-67563bced21f|8aakHwQeR3g5dWbeN4OGCs3FpaxyvkanTDMfbD4eIS_NsLS7nMlS4Q"
      },
      "qdrant_url": {
        "fn::secret": "https://a2a5dc3b-bf37-4907-9398-d49f5c6813ed.us-west-2-0.aws.cloud.qdrant.io"
      },
      "qdrant_cluster_api_key": {
        "fn::secret": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2Nlc3MiOiJtIiwiZXhwIjoxNzY1NTkxNjEzfQ.a4uBhUimAhpzdGLLOmSwHwGWF4rAQynEFZG8A9pDHkQ"
      },
      "neo4j_uri": {
        "fn::secret": "bolt://localhost:7687"
      },
      "neo4j_client_id": {
        "fn::secret": "jPSJvG4itnj6DHbdUwm9dBTjeimb9wXv"
      },
      "neo4j_client_secret": {
        "fn::secret": "q5XHZu1GOrsJK7bcOByHCNxZy3LrCF3iVg-fVaHLwyj6N5nRFe_Fif-YORMtWfPy"
      },
      "postgres_password": {
        "fn::secret": "sophia_secure_password_2024"
      },
      "postgres_host": {
        "fn::secret": "localhost"
      },
      "postgres_port": {
        "fn::secret": "5432"
      },
      "postgres_db": {
        "fn::secret": "sophia"
      },
      "postgres_user": {
        "fn::secret": "sophia"
      },
      "redis_cloud_url": {
        "fn::secret": "redis-15014.force172.us-east-1-1.ec2.redns.redis-cloud.com"
      },
      "redis_host": {
        "fn::secret": "localhost"
      },
      "redis_port": {
        "fn::secret": "6380"
      },
      "redis_user_api_key": {
        "fn::secret": "S666q3cr9wmzpetc6iud02iqv26774azveodh2pfadrd7pgq8l7"
      },
      "neon_api_key": {
        "fn::secret": "napi_r3gsuacduzw44nqdqav1u0hr2uv4bb2if48r8627jkxo7e4b2sxn92wsgf6zlxby"
      },
      "neon_project_id": {
        "fn::secret": "rough-union-72390895"
      },
      "neon_branch_id": {
        "fn::secret": "br-green-firefly-afykrx78"
      },
      "neon_api_token": {
        "fn::secret": "napi_r3gsuacduzw44nqdqav1u0hr2uv4bb2if48r8627jkxo7e4b2sxn92wsgf6zlxby"
      },
      "neon_endpoint": {
        "fn::secret": "rough-union-72390895.us-west-2.aws.neon.tech"
      },
      "neon_host": {
        "fn::secret": "rough-union-72390895.us-west-2.aws.neon.tech"
      },
      "neon_database": {
        "fn::secret": "sophia"
      },
      "neon_port": {
        "fn::secret": "5432"
      },
      "neon_auth_jwks_url": {
        "fn::secret": "https://auth.neon.tech/.well-known/jwks.json"
      },
      "postgres_host: str": {
        "fn::secret": "Field(\"localhost\", env=\"POSTGRES_HOST\")"
      },
      "postgres_port: int": {
        "fn::secret": "Field(5432, env=\"POSTGRES_PORT\", gt=0, le=65535)"
      },
      "postgres_db: str": {
        "fn::secret": "Field(\"sophia\", env=\"POSTGRES_DB\")"
      },
      "postgres_user: str": {
        "fn::secret": "Field(\"sophia_user\", env=\"POSTGRES_USER\")"
      },
      "postgres_password: secretstr": {
        "fn::secret": "Field(..., env=\"POSTGRES_PASSWORD\")"
      },
      "postgres_ssl_mode: str": {
        "fn::secret": "Field(\"prefer\", env=\"POSTGRES_SSL_MODE\")"
      },
      "redis_host: str": {
        "fn::secret": "Field(\"localhost\", env=\"REDIS_HOST\")"
      },
      "redis_port: int": {
        "fn::secret": "Field(6379, env=\"REDIS_PORT\", gt=0, le=65535)"
      },
      "redis_db: int": {
        "fn::secret": "Field(0, env=\"REDIS_DB\", ge=0)"
      },
      "redis_password: optional[secretstr]": {
        "fn::secret": "Field(None, env=\"REDIS_PASSWORD\")"
      },
      "return f\"postgresql://{self.postgres_user}:{password}@{self.postgres_host}:{self.postgres_port}/{self.postgres_db}?sslmode": {
        "fn::secret": "{self.postgres_ssl_mode}"
      },
      "database: databasesettings": {
        "fn::secret": "DatabaseSettings()"
      },
      "weaviate_port": {
        "fn::secret": "8080            # Weaviate vector database"
      },
      "neo4j_port": {
        "fn::secret": "7687               # Neo4j graph database"
      },
      "database_url": {
        "fn::secret": "postgresql://user:password@localhost:5432/sophia"
      },
      "neo4j_user": {
        "fn::secret": "neo4j"
      },
      "neo4j_password": {
        "fn::secret": "YOUR-NEO4J-PASSWORD"
      },
      "neon_database_url": {
        "fn::secret": "postgresql://neondb_owner:npg_KAox7FwSrHu9@ep-rough-dew-af6w48m3.c-2.us-west-2.aws.neon.tech/neondb?sslmode=require"
      },
      "port_postgres": {
        "fn::secret": "5432"
      },
      "port_redis": {
        "fn::secret": "6379"
      },
      "port_weaviate": {
        "fn::secret": "8080"
      },
      "port_neo4j_http": {
        "fn::secret": "7474"
      },
      "port_neo4j_bolt": {
        "fn::secret": "7687"
      }
    },
    "infrastructure": {
      "portkey_vk_github": {
        "fn::secret": "github-vk-a5b609"
      },
      "github_token": {
        "fn::secret": "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"
      },
      "github_pat": {
        "fn::secret": "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"
      },
      "github_org": {
        "fn::secret": "pay-ready"
      },
      "github_username": {
        "fn::secret": "scoobyjava"
      },
      "lambda_cloud_endpoint": {
        "fn::secret": "https://cloud.lambdalabs.com/api/v1"
      },
      "github_enabled": {
        "fn::secret": "true"
      }
    },
    "development": {
      "note_local_dotenv_removed": {
        "fn::secret": "Local dotenv disabled; use CI-injected secrets"
      },
      "local_dev_mode": {
        "fn::secret": "true"
      },
      "enable_debug_logging: bool": {
        "fn::secret": "Field(False, env=\"ENABLE_DEBUG_LOGGING\")"
      },
      "debug: bool": {
        "fn::secret": "Field(False, env=\"DEBUG\")"
      },
      "debug": {
        "fn::secret": "false"
      }
    },
    "misc": {
      "_loaded": {
        "fn::secret": "True"
      },
      "s": {
        "fn::secret": "line.strip()"
      },
      "if not s or s.startswith(\"#\") or \"": {
        "fn::secret": " not in s:"
      },
      "k, v": {
        "fn::secret": "s.split(\"=\", 1)"
      },
      "note_local_dotenv_removed_1": {"fn::secret": "Removed load_dotenv ~/.config reference"},
      "note_local_dotenv_removed_2": {"fn::secret": "Removed load_dotenv ~/.config legacy"},
      "note_local_dotenv_removed_3": {"fn::secret": "Removed load_dotenv .env reference"},
      "node_env": {
        "fn::secret": "development"
      },
      "app_env": {
        "fn::secret": "development"
      },
      "environment": {
        "fn::secret": "development"
      },
      "log_level": {
        "fn::secret": "INFO"
      },
      "mcp_memory_host": {
        "fn::secret": "0.0.0.0"
      },
      "mcp_memory_port": {
        "fn::secret": "8081"
      },
      "mcp_fs_sophia_port": {
        "fn::secret": "8082"
      },
      "mcp_git_port": {
        "fn::secret": "8084"
      },
      "mcp_log_level": {
        "fn::secret": "INFO"
      },
      "use_portkey_routing": {
        "fn::secret": "false"
      },
      "enable_fallback": {
        "fn::secret": "true"
      },
      "enable_load_balancing": {
        "fn::secret": "false"
      },
      "mcp_server_url": {
        "fn::secret": "http://localhost:8004"
      },
      "mcp_api_key": {
        "fn::secret": "sophia-mcp-key"
      },
      "next_public_api_url": {
        "fn::secret": "http://localhost:8000"
      },
      "next_public_api_base": {
        "fn::secret": "http://localhost:8000"
      },
      "next_public_ws_url": {
        "fn::secret": "ws://localhost:8000/ws/orchestrator"
      },
      "next_public_api_host": {
        "fn::secret": "localhost"
      },
      "next_public_api_port": {
        "fn::secret": "8000"
      },
      "next_public_ws_host": {
        "fn::secret": "localhost"
      },
      "next_public_ws_port": {
        "fn::secret": "8000"
      },
      "next_public_mcp_memory_url": {
        "fn::secret": "http://localhost:8081"
      },
      "next_public_mcp_filesystem_url": {
        "fn::secret": "http://localhost:8082"
      },
      "next_public_mcp_git_url": {
        "fn::secret": "http://localhost:8084"
      },
      "portkey_api_key": {
        "fn::secret": "nYraiE8dOR9A1gDwaRNpSSXRkXBc"
      },
      "portkey_base_url": {
        "fn::secret": "https://api.portkey.ai/v1"
      },
      "portkey_vk_openrouter": {
        "fn::secret": "vkj-openrouter-cc4151"
      },
      "portkey_vk_stability": {
        "fn::secret": "stability-vk-a575fb"
      },
      "portkey_vk_milvus": {
        "fn::secret": "milvus-vk-34fa02"
      },
      "portkey_default_provider": {
        "fn::secret": "openai"
      },
      "portkey_default_model": {
        "fn::secret": "gpt-4o-mini"
      },
      "portkey_default_max_tokens": {
        "fn::secret": "4000"
      },
      "portkey_cache_enabled": {
        "fn::secret": "true"
      },
      "portkey_cache_ttl": {
        "fn::secret": "3600"
      },
      "portkey_cache_mode": {
        "fn::secret": "semantic"
      },
      "portkey_retry_delay": {
        "fn::secret": "1000"
      },
      "portkey_retry_exponential_backoff": {
        "fn::secret": "true"
      },
      "portkey_guardrails_enabled": {
        "fn::secret": "true"
      },
      "portkey_guardrails_pii_redaction": {
        "fn::secret": "true"
      },
      "portkey_log_level": {
        "fn::secret": "info"
      },
      "portkey_log_requests": {
        "fn::secret": "true"
      },
      "portkey_log_responses": {
        "fn::secret": "false"
      },
      "portkey_track_costs": {
        "fn::secret": "true"
      },
      "portkey_cost_alert_threshold": {
        "fn::secret": "10.00"
      },
      "portkey_request_timeout": {
        "fn::secret": "30000"
      },
      "portkey_connection_pooling": {
        "fn::secret": "true"
      },
      "portkey_load_balance_strategy": {
        "fn::secret": "round-robin"
      },
      "portkey_health_check_interval": {
        "fn::secret": "60000"
      },
      "portkey_custom_headers": {
        "fn::secret": "{\"X-Source\": \"sophia-intel-ai\"}"
      },
      "portkey_virtual_keys": {
        "fn::secret": "anthropic-vk-b42804,deepseek-vk-24102f,groq-vk-6b9b52,openai-vk-190a60,perplexity-vk-56c172,together-ai-670469,vkj-openrouter-cc4151,xai-vk-e65d0f"
      },
      "agno_api_key": {
        "fn::secret": "phi-0cnOaV2N-MKID0LJTszPjAdj7XhunqMQFG4IwLPG9dI"
      },
      "agno_api_image": {
        "fn::secret": "ghcr.io/agno-agi/agent-api:v1.0.0"
      },
      
      "openrouter_api_key": {
        "fn::secret": "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"
      },
      "aimlapi_api_key": {
        "fn::secret": "562d964ac0b54357874b01de33cb91e9"
      },
      "aimlapi_key": {
        "fn::secret": "562d964ac0b54357874b01de33cb91e9"
      },
      "intercom_access_token": {
        "fn::secret": "YOUR_INTERCOM_ACCESS_TOKEN"
      },
      "intercom_app_id": {
        "fn::secret": "YOUR_INTERCOM_APP_ID"
      },
      "intercom_client_id": {
        "fn::secret": "YOUR_INTERCOM_CLIENT_ID"
      },
      "intercom_client_secret": {
        "fn::secret": "YOUR_INTERCOM_CLIENT_SECRET"
      },
      "lattice_api_key": {
        "fn::secret": "8aea9524-1849-418f-bec4-eb2d1153449f"
      },
      "lattice_company_slug": {
        "fn::secret": "YOUR_COMPANY_SLUG"
      },
      "ceo_knowledge_base_api_key": {
        "fn::secret": "patuojzcFCHtcwkH3.2d1b20fd467f58319534f2abb02899d32390e1db02ffa226aa08c084bd21ce5d"
      },
      "ceo_knowledge_base_id": {
        "fn::secret": "appYOUR_CEO_KB_BASE_ID"
      },
      "google_drive_folder_id": {
        "fn::secret": "YOUR_GOOGLE_DRIVE_FOLDER_ID"
      },
      "google_service_account_key": {
        "fn::secret": "YOUR_SERVICE_ACCOUNT_JSON_KEY"
      },
      "eleven_labs_api_key": {
        "fn::secret": "sk_0b68a8ac28119888145589965bf097211889379a3da2ad41"
      },
      "elevenlabs_api_key": {
        "fn::secret": "sk_0b68a8ac28119888145589965bf097211889379a3da2ad41"
      },
      "mem0_api_key": {
        "fn::secret": "m0-migu5eMnfwT41nhTgVHsCnSAifVtOf3WIFz2vmQc"
      },
      "mem0_account_id": {
        "fn::secret": "org_gHuEO2H7ymIIgivcWeKI2psRFHUnbZ54RQNYVb4T"
      },
      "mem0_account_name": {
        "fn::secret": "scoobyjava-default-org"
      },
      "tavily_api_key": {
        "fn::secret": "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"
      },
      "exa_api_key": {
        "fn::secret": "fdf07f38-34ad-44a9-ab6f-74ca2ca90fd4"
      },
      "brave_api_key": {
        "fn::secret": "BSApz0194z7SG6DplmVozl7ttFOi0Eo"
      },
      "newsdata_api_key": {
        "fn::secret": "pub_7c0992e0408246a88af169733912e4e5"
      },
      "sentry_api_token": {
        "fn::secret": "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"
      },
      "arize_api_key": {
        "fn::secret": "ak-0ea39c4f-d87e-492c-afa3-cc34b69dfdba-2cqWixdMIgv9RqR8DWTqkIGugAicXQ0eu"
      },
      "arize_space_id": {
        "fn::secret": "U3BhY2U6MjIzNTA6UlllNQ=="
      },
      "langchain_api_key": {
        "fn::secret": "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"
      },
      "n8n_api_key": {
        "fn::secret": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIzN2Y4NTVkMi05ODIwLTQ2ZmMtYjlhMS1kMjdlN2ZhMGQ3MDIiLCJpc3MiOiJuOG4iLCJhdWQiOiJwdWJsaWMtYXBpIiwiaWF0IjoxNzUwMjgyMjU5LCJleHAiOjE3NTgwMDYwMDB9.5uLdSTZdIwlSld3WpVGC0TVm97vvzXs3y44FNeRm3N8"
      },
      "n8n_instance_url": {
        "fn::secret": "https://scoobyjava.app.n8n.cloud"
      },
      "n8n_username": {
        "fn::secret": "admin"
      },
      "n8n_webhook_url": {
        "fn::secret": "https://scoobyjava.app.n8n.cloud/webhook/gong-webhook"
      },
      "telegram_api_key": {
        "fn::secret": "8431354714:AAGp0HXFAoCYBnjyiZnqGoVVd8SBgCnujE0"
      },
      "assembly_api_key": {
        "fn::secret": "915990f9d7b64eb2bf8fa49b364ffa85"
      },
      "deepgram_api_key": {
        "fn::secret": "YOUR_DEEPGRAM_API_KEY"
      },
      "stability_api_key": {
        "fn::secret": "sk-d3ym0y0RKM841TtSRLst4LNcGc5Ke4WMNLnjmKLcLtQqkVy5"
      },
      "eden_ai_api_key": {
        "fn::secret": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiMDE1M2M3ZmMtMTUyMi00NmNiLTg3YjMtNzljZjI4NjQ3YmFiIiwidHlwZSI6ImFwaV90b2tlbiJ9.MFluGVw2X4-Q91KssMyM-4u7ERGqNtdG6n_14OwURwI"
      },
      "jwt_secret": {
        "fn::secret": "sophia_super_secure_jwt_secret_key_for_production_2024_0987654321"
      },
      "api_secret_key": {
        "fn::secret": "sophia_api_secret_key_2024_production_deployment"
      },
      "encryption_key": {
        "fn::secret": "sophia_encryption_key_2024_ultra_secure"
      },
      "mcp_secret_key": {
        "fn::secret": "sophia_mcp_secret_key_2024"
      },
      "agent_api_port": {
        "fn::secret": "8003"
      },
      "telemetry_port": {
        "fn::secret": "5003"
      },
      "ui_port": {
        "fn::secret": "3000"
      },
      "cli_ws_port": {
        "fn::secret": "8083"
      },
      "mcp_file_port": {
        "fn::secret": "8082"
      },
      "mcp_web_port": {
        "fn::secret": "8083"
      },
      "next_public_telemetry_url": {
        "fn::secret": "http://localhost:5003"
      },
      "ws_url": {
        "fn::secret": "ws://localhost:8083"
      },
      "mcp_fs_base_url": {
        "fn::secret": "http://mcp-filesystem:8082"
      },
      "sophia_path": {
        "fn::secret": "$HOME/sophia-cli"
      },
      "workspace_path": {
        "fn::secret": "/app"
      },
      "workspace_name": {
        "fn::secret": "sophia"
      },
      "read_only": {
        "fn::secret": "false"
      },
      "application_id": {
        "fn::secret": "82329689-C871-456F-8AA0-96DBDF5B0275"
      },
      "name": {
        "fn::secret": "Sophia Intelligence Platform - Unified"
      },
      "export port_api": {
        "fn::secret": "${PORT_API:-8003}"
      },
      "export port_ws": {
        "fn::secret": "${PORT_WS:-8083}"
      },
      "export port_ui": {
        "fn::secret": "${PORT_UI:-3000}"
      },
      "export next_public_api_url": {
        "fn::secret": "${NEXT_PUBLIC_API_URL:-http://localhost:${PORT_API}}"
      },
      "export next_public_ws_url": {
        "fn::secret": "${NEXT_PUBLIC_WS_URL:-ws://localhost:${PORT_WS}}"
      },
      "export api_base_url": {
        "fn::secret": "${API_BASE_URL:-http://localhost:${PORT_API}}"
      },
      "logger": {
        "fn::secret": "logging.getLogger(__name__)"
      },
      "def load_dotenv_safe(dotenv_path: optional[union[str, path]]": {
        "fn::secret": "None) -> bool:"
      },
      "current_path": {
        "fn::secret": "Path.cwd()"
      },
      "env_file": {
        "fn::secret": ".env"
      },
      "dotenv_path": {
        "fn::secret": "env_file"
      },
      "openrouter_api_key: optional[secretstr]": {
        "fn::secret": "Field(None, env=\"OPENROUTER_API_KEY\")"
      },
      "openrouter_base_url: optional[str]": {
        "fn::secret": "Field("
      },
      "\"https://openrouter.ai/api/v1\", env": {
        "fn::secret": "OPENROUTER_BASE_URL"
      },
      "\"https://generativelanguage.googleapis.com/v1\", env": {
        "fn::secret": "GEMINI_BASE_URL"
      },
      "default_model: str": {
        "fn::secret": "Field(\"gpt-3.5-turbo\", env=\"DEFAULT_LLM_MODEL\")"
      },
      "default_temperature: float": {
        "fn::secret": "Field(0.7, env=\"DEFAULT_TEMPERATURE\", ge=0.0, le=2.0)"
      },
      "default_max_tokens: int": {
        "fn::secret": "Field(4096, env=\"DEFAULT_MAX_TOKENS\", gt=0)"
      },
      "default_timeout: int": {
        "fn::secret": "Field(30, env=\"DEFAULT_LLM_TIMEOUT\", gt=0)"
      },
      "rate_limit_requests_per_minute: int": {
        "fn::secret": "Field(60, env=\"RATE_LIMIT_RPM\", gt=0)"
      },
      "rate_limit_tokens_per_minute: int": {
        "fn::secret": "Field(90000, env=\"RATE_LIMIT_TPM\", gt=0)"
      },
      "env_prefix": {
        "fn::secret": "FEATURE_"
      },
      "case_sensitive": {
        "fn::secret": "False"
      },
      "vector_store_type: str": {
        "fn::secret": "Field(\"weaviate\", env=\"VECTOR_STORE_TYPE\")"
      },
      "vector_store_url: str": {
        "fn::secret": "Field(\"http://localhost:8080\", env=\"VECTOR_STORE_URL\")"
      },
      "vector_store_api_key: optional[secretstr]": {
        "fn::secret": "Field(None, env=\"VECTOR_STORE_API_KEY\")"
      },
      "max_pool_size: int": {
        "fn::secret": "Field(20, env=\"DB_MAX_POOL_SIZE\", gt=0)"
      },
      "pool_timeout: int": {
        "fn::secret": "Field(30, env=\"DB_POOL_TIMEOUT\", gt=0)"
      },
      "pool_recycle: int": {
        "fn::secret": "Field(3600, env=\"DB_POOL_RECYCLE\", gt=0)"
      },
      "allowed_types": {
        "fn::secret": "[\"weaviate\", \"chromadb\", \"pinecone\", \"qdrant\"]"
      },
      "password": {
        "fn::secret": "self.redis_password.get_secret_value()"
      },
      "enable_memory_system: bool": {
        "fn::secret": "Field(True, env=\"ENABLE_MEMORY_SYSTEM\")"
      },
      "enable_tool_calling: bool": {
        "fn::secret": "Field(True, env=\"ENABLE_TOOL_CALLING\")"
      },
      "enable_swarm_mode: bool": {
        "fn::secret": "Field(False, env=\"ENABLE_SWARM_MODE\")"
      },
      "enable_distributed_mode: bool": {
        "fn::secret": "Field(False, env=\"ENABLE_DISTRIBUTED_MODE\")"
      },
      "enable_metrics: bool": {
        "fn::secret": "Field(True, env=\"ENABLE_METRICS\")"
      },
      "enable_tracing: bool": {
        "fn::secret": "Field(False, env=\"ENABLE_TRACING\")"
      },
      "enable_api_key_rotation: bool": {
        "fn::secret": "Field(True, env=\"ENABLE_API_KEY_ROTATION\")"
      },
      "enable_request_validation: bool": {
        "fn::secret": "Field(True, env=\"ENABLE_REQUEST_VALIDATION\")"
      },
      "enable_rate_limiting: bool": {
        "fn::secret": "Field(True, env=\"ENABLE_RATE_LIMITING\")"
      },
      "enable_caching: bool": {
        "fn::secret": "Field(True, env=\"ENABLE_CACHING\")"
      },
      "enable_connection_pooling: bool": {
        "fn::secret": "Field(True, env=\"ENABLE_CONNECTION_POOLING\")"
      },
      "enable_async_processing: bool": {
        "fn::secret": "Field(True, env=\"ENABLE_ASYNC_PROCESSING\")"
      },
      "enabled_llm_providers: list[str]": {
        "fn::secret": "Field("
      },
      "default": {
        "fn::secret": "[\"openai\", \"anthropic\"], env=\"ENABLED_LLM_PROVIDERS"
      },
      "@validator(\"enabled_llm_providers\", pre": {
        "fn::secret": "True)"
      },
      "app_name: str": {
        "fn::secret": "Field(\"Sophia Intelligence AI\", env=\"APP_NAME\")"
      },
      "app_version: str": {
        "fn::secret": "Field(\"1.0.0\", env=\"APP_VERSION\")"
      },
      "environment: str": {
        "fn::secret": "Field(\"development\", env=\"ENVIRONMENT\")"
      },
      "api_host: str": {
        "fn::secret": "Field(\"0.0.0.0\", env=\"API_HOST\")"
      },
      "api_port: int": {
        "fn::secret": "Field(8000, env=\"API_PORT\", gt=0, le=65535)"
      },
      "api_prefix: str": {
        "fn::secret": "Field(\"/api/v1\", env=\"API_PREFIX\")"
      },
      "secret_key: secretstr": {
        "fn::secret": "Field(..., env=\"SECRET_KEY\")"
      },
      "jwt_algorithm: str": {
        "fn::secret": "Field(\"HS256\", env=\"JWT_ALGORITHM\")"
      },
      "jwt_expire_minutes: int": {
        "fn::secret": "Field(1440, env=\"JWT_EXPIRE_MINUTES\", gt=0)  # 24 hours"
      },
      "log_level: str": {
        "fn::secret": "Field(\"INFO\", env=\"LOG_LEVEL\")"
      },
      "log_format: str": {
        "fn::secret": "Field(\"json\", env=\"LOG_FORMAT\")"
      },
      "log_file: optional[str]": {
        "fn::secret": "Field(None, env=\"LOG_FILE\")"
      },
      "llm: llmsettings": {
        "fn::secret": "LLMSettings()"
      },
      "features: featureflagsettings": {
        "fn::secret": "FeatureFlagSettings()"
      },
      "allowed_envs": {
        "fn::secret": "[\"development\", \"testing\", \"staging\", \"production\"]"
      },
      "allowed_levels": {
        "fn::secret": "[\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\"]"
      },
      "allowed_formats": {
        "fn::secret": "[\"json\", \"text\"]"
      },
      "return self.environment": {
        "fn::secret": "= \"development"
      },
      "env_file_encoding": {
        "fn::secret": "utf-8"
      },
      "_settings: optional[settings]": {
        "fn::secret": "None"
      },
      "_settings": {
        "fn::secret": "None"
      },
      "api_base_url": {
        "fn::secret": "http://localhost:8003"
      },
      "app_name": {
        "fn::secret": "Sophia Intel AI"
      },
      "sophia_api_port": {
        "fn::secret": "8000  # Unified API port"
      },
      "sophia_ui_port": {
        "fn::secret": "3000"
      },
      "mcp_filesystem_port": {
        "fn::secret": "8082"
      },
      "jupyter_port": {
        "fn::secret": "8888             # Jupyter notebook server"
      },
      "prometheus_port": {
        "fn::secret": "9090          # Prometheus metrics server"
      },
      "grafana_port": {
        "fn::secret": "3001             # Grafana dashboard server"
      },
      "nginx_port": {
        "fn::secret": "80                 # Nginx reverse proxy"
      },
      "traefik_port": {
        "fn::secret": "8088             # Traefik reverse proxy (dashboard)"
      },
      "default_host": {
        "fn::secret": "localhost        # Default host for service URLs"
      },
      "host": {
        "fn::secret": "0.0.0.0                  # API server bind host"
      },
      "workers": {
        "fn::secret": "4                     # Number of worker processes"
      },
      "aimlapi_base": {
        "fn::secret": "https://api.aimlapi.com/v1"
      },
      "aiml_enhanced_enabled": {
        "fn::secret": "true"
      },
      "aiml_router_token": {
        "fn::secret": "# Optional: Bearer token for /api/aiml/* routes"
      },
      
      "codex_enabled": {
        "fn::secret": "true"
      },
      "codex_base_url": {
        "fn::secret": ""
      },
      "codex_model": {
        "fn::secret": "codex-1"
      },
      "codex_mini_model": {
        "fn::secret": "codex-mini-latest"
      },
      "codex_use_mcp": {
        "fn::secret": "true"
      },
      "sophia_proxy_port": {
        "fn::secret": "8080"
      },
      "mcp_fs_port": {
        "fn::secret": "8082"
      },
      "sentry_dsn": {
        "fn::secret": "YOUR-SENTRY-DSN"
      },
      "prometheus_enabled": {
        "fn::secret": "false         # Enable Prometheus metrics"
      },
      "grafana_enabled": {
        "fn::secret": "false           # Enable Grafana dashboards"
      },
      "api_key": {
        "fn::secret": "YOUR-API-KEY-HERE"
      },
      "cors_origins": {
        "fn::secret": "http://localhost:3000,http://localhost:8000"
      },
      "enable_chat": {
        "fn::secret": "true"
      },
      "enable_projects": {
        "fn::secret": "true"
      },
      "enable_analytics": {
        "fn::secret": "true"
      },
      "enable_ai_insights": {
        "fn::secret": "true"
      },
      "mcp_memory_enabled": {
        "fn::secret": "true          # Enable MCP Memory Management"
      },
      "mcp_filesystem_enabled": {
        "fn::secret": "true      # Enable MCP Filesystem Operations"
      },
      "mcp_web_enabled": {
        "fn::secret": "true             # Enable MCP Web Interaction"
      },
      "mcp_git_enabled": {
        "fn::secret": "true             # Enable MCP Git Operations"
      },
      "rate_limit_enabled": {
        "fn::secret": "false        # Disable rate limit in dev (prod can enable)"
      },
      "dock_enabled": {
        "fn::secret": "true"
      },
      "dock_allowlist": {
        "fn::secret": "you@example.com,tiffany@example.com"
      },
      "sophia_brain_controls": {
        "fn::secret": "data/brain_controls.json"
      },
      "service_registry_enabled": {
        "fn::secret": "true"
      },
      "config_validation_enabled": {
        "fn::secret": "true"
      },
      "preflight_checks_enabled": {
        "fn::secret": "true"
      },
      "dependency_check_enabled": {
        "fn::secret": "true"
      },
      "port_conflict_check": {
        "fn::secret": "true"
      },
      "auto_port_assignment": {
        "fn::secret": "false"
      },
      "port_range_start": {
        "fn::secret": "8000"
      },
      "port_range_end": {
        "fn::secret": "9000"
      },
      "voice_deployment_mode": {
        "fn::secret": "hybrid"
      },
      "voice_host": {
        "fn::secret": "0.0.0.0"
      },
      "voice_port": {
        "fn::secret": "8443"
      },
      "videosdk_api_key": {
        "fn::secret": "65e3ae27-8e14-497e-bfff-89392558fbb6"
      },
      "videosdk_secret_key": {
        "fn::secret": "38fdf5d879b47804a99fe23784abc3355697b83b33dd5e61a0dcccfa4d923f3c"
      },
      "voice_models_path": {
        "fn::secret": "/Users/lynnmusil/sophia-intel-ai/models"
      },
      "voice_logs_path": {
        "fn::secret": "/Users/lynnmusil/sophia-intel-ai/logs"
      },
      "wispr_flow_enabled": {
        "fn::secret": "true"
      },
      "line": {
        "fn::secret": "line.strip()"
      },
      "if \"": {
        "fn::secret": " not in line:"
      },
      "data[k.strip()]": {
        "fn::secret": "v.strip()"
      },
      "def _find_repo_root(start: path | none": {
        "fn::secret": "None) -> Path | None:"
      },
      "cur": {
        "fn::secret": "cur.parent"
      },
      "if cur.parent": {
        "fn::secret": "= cur:"
      },
      "repo_env_name": {
        "fn::secret": "os.getenv(\"SOPHIA_REPO_ENV_FILE\", \".env.local.unified\")"
      },
      "repo_root": {
        "fn::secret": "_find_repo_root()"
      },
      "repo_env_path": {
        "fn::secret": "repo_root / repo_env_name"
      },
      "values": {
        "fn::secret": "_parse_env_file(path)"
      },
      "mode": {
        "fn::secret": "path.stat().st_mode & 0o777"
      },
      "roo_assistant_id": {
        "fn::secret": "roo-cursor"
      },
      "cline_assistant_id": {
        "fn::secret": "cline"
      },
      "timeout_ms": {
        "fn::secret": "30000"
      },
      "bridge_port": {
        "fn::secret": "8004"
      },
      "api_port": {
        "fn::secret": "8003"
      },
      "ms_graph_cert_thumbprint": {
        "fn::secret": "7E68655821A51480C60939D7AE26AC6FC0F5A9E2"
      },
      "serper_api_key": {
        "fn::secret": "7b616d4bf53e98d9169e89c25d6f4bf4389a9ed5"
      },
      "quiet": {
        "fn::secret": "${1:-}"
      },
      "root": {
        "fn::secret": "$(root_dir)"
      },
      "while ifs": {
        "fn::secret": "read -r line; do"
      },
      "[[ -z \"$line\" || \"$line\"": {
        "fn::secret": "~ ^# || \"$line\" != *\"=\"* ]] && continue"
      },
      "key": {
        "fn::secret": "${line%%=*}\"; val=\"${line#*=}"
      },
      "export \"$key\"": {
        "fn::secret": "$val"
      },
      "port_api": {
        "fn::secret": "8000"
      },
      "port_ui": {
        "fn::secret": "3000"
      },
      "port_mcp_memory": {
        "fn::secret": "8081"
      },
      "port_mcp_filesystem": {
        "fn::secret": "8082"
      },
      "port_mcp_git": {
        "fn::secret": "8084"
      },
      "port_prometheus": {
        "fn::secret": "9090"
      },
      "port_grafana": {
        "fn::secret": "3001"
      },
      "playground_url": {
        "fn::secret": "http://localhost:7777"
      },
      "vk_openrouter": {
        "fn::secret": "your_openrouter_virtual_key_here"
      },
      "embed_base_url": {
        "fn::secret": "https://api.portkey.ai/v1"
      },
      "embed_api_key": {
        "fn::secret": "pk_live_${VK_TOGETHER}"
      },
      "mcp_filesystem": {
        "fn::secret": "true"
      },
      "mcp_git": {
        "fn::secret": "true"
      },
      "mcp_supermemory": {
        "fn::secret": "true"
      },
      "graphrag_enabled": {
        "fn::secret": "true"
      },
      "hybrid_search": {
        "fn::secret": "true"
      },
      "evaluation_gates": {
        "fn::secret": "true"
      },
      "default_pool": {
        "fn::secret": "balanced  # fast/heavy/balanced"
      },
      "enable_telemetry": {
        "fn::secret": "false"
      },
      "telemetry_endpoint": {
        "fn::secret": "http://localhost:4318"
      },
      "allowed_origins": {
        "fn::secret": "http://localhost:3000,http://localhost:3002"
      },
      "enable_rate_limiting": {
        "fn::secret": "true"
      },
      "log_format": {
        "fn::secret": "json"
      },
      "supermemory_db": {
        "fn::secret": "tmp/supermemory.db"
      },
      "embedding_cache_db": {
        "fn::secret": "tmp/embedding_cache.db"
      },
      "knowledge_graph_db": {
        "fn::secret": "tmp/knowledge_graph.db"
      },
      "deploy_target": {
        "fn::secret": "local"
      }
    }
  }
}
