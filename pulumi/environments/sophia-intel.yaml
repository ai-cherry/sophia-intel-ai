# Pulumi ESC Environment Configuration for Sophia Intel AI
# This defines all secrets and configuration for the project

values:
  # LLM Providers
  providers:
    portkey:
      apiKey:
        fn::secret: ${PORTKEY_API_KEY}
      baseUrl: https://api.portkey.ai/v1
      virtualKeys:
        openrouter:
          fn::secret: ${PORTKEY_OPENROUTER_VK}
        together:
          fn::secret: ${PORTKEY_TOGETHER_VK}
        
    openrouter:
      apiKey:
        fn::secret: ${OPENROUTER_API_KEY}
      baseUrl: https://openrouter.ai/api/v1
      
    anthropic:
      apiKey:
        fn::secret: ${ANTHROPIC_API_KEY}
      baseUrl: https://api.anthropic.com
      
    openai:
      apiKey:
        fn::secret: ${OPENAI_API_KEY}
      orgId:
        fn::secret: ${OPENAI_ORG_ID}
        
    groq:
      apiKey:
        fn::secret: ${GROQ_API_KEY}
      baseUrl: https://api.groq.com/openai/v1
      
    together:
      apiKey:
        fn::secret: ${TOGETHER_API_KEY}
      baseUrl: https://api.together.xyz/v1
      
    deepseek:
      apiKey:
        fn::secret: ${DEEPSEEK_API_KEY}
      baseUrl: https://api.deepseek.com/v1
      
    perplexity:
      apiKey:
        fn::secret: ${PERPLEXITY_API_KEY}
      baseUrl: https://api.perplexity.ai
      
    google:
      apiKey:
        fn::secret: ${GOOGLE_API_KEY}
      projectId: ${GOOGLE_CLOUD_PROJECT}
      location: ${GOOGLE_CLOUD_LOCATION}
      
    mistral:
      apiKey:
        fn::secret: ${MISTRAL_API_KEY}
      baseUrl: https://api.mistral.ai/v1
      
    cohere:
      apiKey:
        fn::secret: ${COHERE_API_KEY}
      baseUrl: https://api.cohere.ai

  # AWS Configuration
  aws:
    accessKeyId:
      fn::secret: ${AWS_ACCESS_KEY_ID}
    secretAccessKey:
      fn::secret: ${AWS_SECRET_ACCESS_KEY}
    region: ${AWS_REGION}
    bedrock:
      region: ${AWS_BEDROCK_REGION}

  # Azure Configuration
  azure:
    openai:
      apiKey:
        fn::secret: ${AZURE_OPENAI_API_KEY}
      endpoint: ${AZURE_OPENAI_ENDPOINT}
      deployment: ${AZURE_OPENAI_DEPLOYMENT}
      apiVersion: ${AZURE_OPENAI_API_VERSION}

  # Vector Databases
  vectordb:
    weaviate:
      url: ${WEAVIATE_URL}
      apiKey:
        fn::secret: ${WEAVIATE_API_KEY}
      classes:
        code: CodeChunk
        doc: DocChunk
        
    pinecone:
      apiKey:
        fn::secret: ${PINECONE_API_KEY}
      environment: ${PINECONE_ENVIRONMENT}
      index: sophia-intel
      
    qdrant:
      url: ${QDRANT_URL}
      apiKey:
        fn::secret: ${QDRANT_API_KEY}
      collection: sophia-intel

  # Databases
  database:
    postgres:
      url:
        fn::secret: ${DATABASE_URL}
    neon:
      url:
        fn::secret: ${NEON_DATABASE_URL}
    redis:
      url:
        fn::secret: ${REDIS_URL}
      password:
        fn::secret: ${REDIS_PASSWORD}

  # Observability
  observability:
    langfuse:
      apiKey:
        fn::secret: ${LANGFUSE_API_KEY}
      baseUrl: ${LANGFUSE_BASE_URL}
      project: sophia-intel
      
    langsmith:
      apiKey:
        fn::secret: ${LANGCHAIN_API_KEY}
      project: sophia-intel
      endpoint: https://api.smith.langchain.com
      
    helicone:
      apiKey:
        fn::secret: ${HELICONE_API_KEY}
      baseUrl: https://oai.hconeai.com/v1
      
    datadog:
      apiKey:
        fn::secret: ${DD_API_KEY}
      site: ${DD_SITE}
      service: sophia-intel

  # Agno Configuration
  agno:
    apiKey:
      fn::secret: ${AGNO_API_KEY}
    workspace: sophia-intel
    telemetry: false
    logLevel: INFO
    memoryProvider: weaviate
    cacheProvider: redis

  # GitHub
  github:
    token:
      fn::secret: ${GITHUB_TOKEN}
    owner: ai-cherry
    repo: sophia-intel-ai

  # Security
  security:
    jwtSecret:
      fn::secret: ${JWT_SECRET}
    encryptionKey:
      fn::secret: ${ENCRYPTION_KEY}
    apiRateLimit: 100
    apiRateWindow: 60

  # External Services
  services:
    slack:
      botToken:
        fn::secret: ${SLACK_BOT_TOKEN}
      appToken:
        fn::secret: ${SLACK_APP_TOKEN}
        
    discord:
      botToken:
        fn::secret: ${DISCORD_BOT_TOKEN}
        
    twilio:
      accountSid:
        fn::secret: ${TWILIO_ACCOUNT_SID}
      authToken:
        fn::secret: ${TWILIO_AUTH_TOKEN}
      whatsappNumber: +14155238886
      
    sendgrid:
      apiKey:
        fn::secret: ${SENDGRID_API_KEY}
      fromEmail: noreply@sophia-intel.ai

  # Feature Flags
  features:
    streaming: true
    memory: true
    teams: true
    workflows: true
    apps: true
    evaluationGates: true
    runnerGate: true
    safetyChecks: true

  # Performance Settings
  performance:
    maxWorkers: 10
    timeoutSeconds: 120
    maxRetries: 3
    batchSize: 10
    parallelRequests: 5

  # Cost Controls
  costs:
    dailyBudgetUsd: 100
    alertThresholdUsd: 80
    maxTokensPerRequest: 4096
    maxRequestsPerMinute: 60

  # Application Settings
  app:
    playgroundPort: 7777
    playgroundHost: 127.0.0.1
    agentUiPort: 3000
    localDevMode: true
    enableWrites: true

environmentVariables:
  # Export all values as environment variables
  OPENAI_BASE_URL: ${providers.portkey.baseUrl}
  OPENAI_API_KEY: ${providers.portkey.apiKey}
  PORTKEY_API_KEY: ${providers.portkey.apiKey}
  OPENROUTER_API_KEY: ${providers.openrouter.apiKey}
  ANTHROPIC_API_KEY: ${providers.anthropic.apiKey}
  GROQ_API_KEY: ${providers.groq.apiKey}
  TOGETHER_API_KEY: ${providers.together.apiKey}
  DEEPSEEK_API_KEY: ${providers.deepseek.apiKey}
  PERPLEXITY_API_KEY: ${providers.perplexity.apiKey}
  GOOGLE_API_KEY: ${providers.google.apiKey}
  MISTRAL_API_KEY: ${providers.mistral.apiKey}
  COHERE_API_KEY: ${providers.cohere.apiKey}
  
  AWS_ACCESS_KEY_ID: ${aws.accessKeyId}
  AWS_SECRET_ACCESS_KEY: ${aws.secretAccessKey}
  AWS_REGION: ${aws.region}
  
  WEAVIATE_URL: ${vectordb.weaviate.url}
  WEAVIATE_API_KEY: ${vectordb.weaviate.apiKey}
  
  DATABASE_URL: ${database.postgres.url}
  REDIS_URL: ${database.redis.url}
  
  LANGFUSE_API_KEY: ${observability.langfuse.apiKey}
  GITHUB_TOKEN: ${github.token}
  
  AGNO_API_KEY: ${agno.apiKey}
  AGNO_TELEMETRY: ${agno.telemetry}
  
  PLAYGROUND_PORT: ${app.playgroundPort}
  LOCAL_DEV_MODE: ${app.localDevMode}