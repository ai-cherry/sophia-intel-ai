#!/usr/bin/env python3
"""
Env Doctor: detect and resolve environment fragmentation.

Checks:
- Multiple .env variants present
- Conflicting key definitions across files
- Missing high-priority keys

Usage:
  python3 scripts/env_doctor.py            # report only
  python3 scripts/env_doctor.py --merge    # create/refresh .env.local from sources
"""
from __future__ import annotations

import argparse
import os
from pathlib import Path
from typing import Dict, List, Tuple


ROOT = Path(__file__).resolve().parent.parent


def parse_env_file(p: Path) -> Dict[str, str]:
    data: Dict[str, str] = {}
    if not p.exists():
        return data
    for line in p.read_text().splitlines():
        s = line.strip()
        if not s or s.startswith("#") or "=" not in s:
            continue
        k, v = s.split("=", 1)
        data[k.strip()] = v.strip()
    return data


def collect_sources() -> List[Tuple[str, Path, Dict[str, str]]]:
    files = [
        ("template", ROOT / ".env.template"),
        ("env", ROOT / ".env"),
        ("env.local", ROOT / ".env.local"),
        ("deprecated.example", ROOT / ".env.example"),
        ("deprecated.mcp.example", ROOT / ".env.mcp.example"),
        ("deprecated.sophia.example", ROOT / ".env.sophia.example"),
        ("secure_vault", Path("~/.config/artemis/env").expanduser()),
    ]
    out: List[Tuple[str, Path, Dict[str, str]]] = []
    for label, path in files:
        out.append((label, path, parse_env_file(path)))
    return out


def compute_conflicts(sources: List[Tuple[str, Path, Dict[str, str]]]) -> Dict[str, List[Tuple[str, str]]]:
    seen: Dict[str, List[Tuple[str, str]]] = {}
    for label, _p, data in sources:
        for k, v in data.items():
            seen.setdefault(k, []).append((label, v))
    conflicts = {k: entries for k, entries in seen.items() if len(entries) > 1}
    return conflicts


def merge_to_env_local(sources: List[Tuple[str, Path, Dict[str, str]]]) -> str:
    # Priority: secure_vault > .env.local > .env > deprecated.* > template (keys only)
    order = [
        "secure_vault",
        "env.local",
        "env",
        "deprecated.example",
        "deprecated.mcp.example",
        "deprecated.sophia.example",
        "template",
    ]
    by_label = {label: data for label, _p, data in sources}
    keys = set().union(*[d.keys() for _, _, d in sources])
    lines: List[str] = ["# Auto-generated by env_doctor --merge\n"]
    for k in sorted(keys):
        val = None
        for label in order:
            d = by_label.get(label, {})
            if k in d and d[k]:
                val = d[k]
                break
        if val is None:
            val = ""
        lines.append(f"{k}={val}\n")
    return "".join(lines)


def main() -> int:
    ap = argparse.ArgumentParser()
    ap.add_argument("--merge", action="store_true", help="Write merged .env.local from all sources")
    args = ap.parse_args()

    sources = collect_sources()
    present = [(lbl, p) for lbl, p, d in sources if d]
    deprecated_present = [(lbl, p) for lbl, p, d in sources if lbl.startswith("deprecated") and d]
    conflicts = compute_conflicts(sources)

    print("🔎 Env Doctor Report\n")
    print("Sources present (non-empty):")
    for lbl, p in present:
        print(f"  - {lbl:20s} -> {p}")

    if deprecated_present:
        print("\n⚠️  Deprecated env files contain values:")
        for lbl, p in deprecated_present:
            print(f"  - {lbl:20s} -> {p}")
        print("  Action: run `make env.clean-deprecated` after merging.")

    required = ["PORTKEY_API_KEY"]
    optional = ["OPENAI_API_KEY", "ANTHROPIC_API_KEY", "XAI_API_KEY"]
    env_all = {}
    for _lbl, _p, d in sources:
        env_all.update(d)
    print("\nRequired keys status:")
    for k in required:
        ok = bool(os.getenv(k) or env_all.get(k))
        print(f"  - {k:20s} : {'OK' if ok else 'MISSING'}")
    print("\nOptional keys (recommended):")
    for k in optional:
        ok = bool(os.getenv(k) or env_all.get(k))
        print(f"  - {k:20s} : {'OK' if ok else 'MISSING'}")

    if conflicts:
        print("\n🔁 Conflicts detected (same key in multiple sources):")
        for k, entries in sorted(conflicts.items()):
            values = ", ".join([f"{lbl}='{v[:6]}…'" for lbl, v in entries])
            print(f"  - {k}: {values}")
        print("  Merge will resolve by priority: secure_vault > .env.local > .env > deprecated > template")

    if args.merge:
        merged = merge_to_env_local(sources)
        out = ROOT / ".env.local"
        out.write_text(merged)
        print(f"\n💾 Wrote merged .env.local with {len(merged.splitlines())} lines")
        return 0

    print("\nNext: run `make env.doctor.merge` to generate .env.local, then `make env.clean-deprecated`.\n")
    return 0


if __name__ == "__main__":
    raise SystemExit(main())

