#!/usr/bin/env python3
"""
Env Doctor: detect and resolve environment fragmentation.
Checks:
- Multiple .env variants present
- Conflicting key definitions across files
- Missing high-priority keys
Deprecated: Central env is <repo>/.env.master only. Do not use env_doctor to
merge .env files. Use scripts/start_all_and_validate.sh to verify environment.
"""
from __future__ import annotations
import argparse
import os
from pathlib import Path
from typing import Dict, List, Tuple
ROOT = Path(__file__).resolve().parent.parent
def parse_env_file(p: Path) -> Dict[str, str]:
    data: Dict[str, str] = {}
    if not p.exists():
        return data
    for line in p.read_text().splitlines():
        s = line.strip()
        if not s or s.startswith("#") or "=" not in s:
            continue
        k, v = s.split("=", 1)
        data[k.strip()] = v.strip()
    return data
def collect_sources() -> List[Tuple[str, Path, Dict[str, str]]]:
    files = [
        ("template", ROOT / ".env.template"),
        ("env", ROOT / ".env"),
        ("env.local", ROOT / ".env.local"),
        ("deprecated.example", ROOT / ".env.template"),
        ("deprecated.mcp.example", ROOT / ".env.template"),
        ("deprecated.sophia.example", ROOT / ".env.sophia.example"),
        ("secure_vault", Path("~/.config//env").expanduser()),
    ]
    out: List[Tuple[str, Path, Dict[str, str]]] = []
    for label, path in files:
        out.append((label, path, parse_env_file(path)))
    return out
def compute_conflicts(sources: List[Tuple[str, Path, Dict[str, str]]]) -> Dict[str, List[Tuple[str, str]]]:
    seen: Dict[str, List[Tuple[str, str]]] = {}
    for label, _p, data in sources:
        for k, v in data.items():
            seen.setdefault(k, []).append((label, v))
    conflicts = {k: entries for k, entries in seen.items() if len(entries) > 1}
    return conflicts
def merge_to_env_local(sources: List[Tuple[str, Path, Dict[str, str]]]) -> str:
    # Priority: secure_vault > .env.local > .env > deprecated.* > template (keys only)
    order = [
        "secure_vault",
        "env.local",
        "env",
        "deprecated.example",
        "deprecated.mcp.example",
        "deprecated.sophia.example",
        "template",
    ]
    by_label = {label: data for label, _p, data in sources}
    keys = set().union(*[d.keys() for _, _, d in sources])
    lines: List[str] = ["# Auto-generated by env_doctor --merge\n"]
    for k in sorted(keys):
        val = None
        for label in order:
            d = by_label.get(label, {})
            if k in d and d[k]:
                val = d[k]
                break
        if val is None:
            val = ""
        lines.append(f"{k}={val}\n")
    return "".join(lines)
def main() -> int:
    print("This script is deprecated. Use .env.master; do not merge .env files.")
    return 2
    sources = collect_sources()
    present = [(lbl, p) for lbl, p, d in sources if d]
    deprecated_present = [(lbl, p) for lbl, p, d in sources if lbl.startswith("deprecated") and d]
    conflicts = compute_conflicts(sources)
    print("🔎 Env Doctor Report\n")
    print("Sources present (non-empty):")
    for lbl, p in present:
        print(f"  - {lbl:20s} -> {p}")
    if deprecated_present:
        print("\n⚠️  Deprecated env files contain values:")
        for lbl, p in deprecated_present:
            print(f"  - {lbl:20s} -> {p}")
        print("  Action: run `make env.clean-deprecated` after merging.")
    required = ["PORTKEY_API_KEY"]
    optional = ["OPENAI_API_KEY", "ANTHROPIC_API_KEY", "XAI_API_KEY"]
    env_all = {}
    for _lbl, _p, d in sources:
        env_all.update(d)
    print("\nRequired keys status:")
    for k in required:
        ok = bool(os.getenv(k) or env_all.get(k))
        print(f"  - {k:20s} : {'OK' if ok else 'MISSING'}")
    print("\nOptional keys (recommended):")
    for k in optional:
        ok = bool(os.getenv(k) or env_all.get(k))
        print(f"  - {k:20s} : {'OK' if ok else 'MISSING'}")
    if conflicts:
        print("\n🔁 Conflicts detected (same key in multiple sources):")
        for k, entries in sorted(conflicts.items()):
            values = ", ".join([f"{lbl}='{v[:6]}…'" for lbl, v in entries])
            print(f"  - {k}: {values}")
        print("  Merge will resolve by priority: secure_vault > .env.local > .env > deprecated > template")
    # Security and format checks
    print("\nSecurity checks:")
    suspicious = []
    secret_patterns = [
        ("OPENAI_API_KEY", r"^sk-[A-Za-z0-9]{20,}"),
        ("ANTHROPIC_API_KEY", r"^sk-ant-[A-Za-z0-9\-]{10,}"),
        ("GROK_API_KEY", r"^(gsk|xai|grok)[A-Za-z0-9_\-]{6,}"),
        ("GITHUB_PAT", r"^(ghp_|github_pat_)[A-Za-z0-9_]{10,}"),
    ]
    import re
    for key, pattern in secret_patterns:
        for lbl, _p, d in sources:
            if key in d and d[key] and not re.match(pattern, d[key]):
                suspicious.append((key, lbl))
    if suspicious:
        for key, lbl in suspicious:
            print(f"  ⚠️  {key} value in {lbl} doesn't match expected format")
    else:
        print("  ✅ No obvious key format issues detected")
    print("\nService URL checks:")
    def url_ok(val: str, prefix: str) -> bool:
        return bool(val and val.startswith(prefix))
    merged_view = {}
    for _lbl, _p, d in sources:
        merged_view.update(d)
    r_ok = url_ok(merged_view.get("REDIS_URL", ""), "redis://")
    p_ok = url_ok(merged_view.get("POSTGRES_URL", ""), "postgresql://")
    w_ok = url_ok(merged_view.get("WEAVIATE_URL", ""), "http")
    print(f"  REDIS_URL:     {'OK' if r_ok else 'MISSING/INVALID'}")
    print(f"  POSTGRES_URL:  {'OK' if p_ok else 'MISSING/INVALID'}")
    print(f"  WEAVIATE_URL:  {'OK' if w_ok else 'MISSING/INVALID'}")
    if args.merge:
        merged = merge_to_env_local(sources)
        out = ROOT / ".env.local"
        if args.backup and out.exists():
            import time
            backup = ROOT / f".env.local.bak.{int(time.time())}"
            backup.write_text(out.read_text())
            print(f"📦 Backed up existing .env.local to {backup}")
        out.write_text(merged)
        print(f"\n💾 Wrote merged .env.local with {len(merged.splitlines())} lines")
        return 0
    print("\nNext: run `make env.doctor.merge` to generate .env.local, then `make env.clean-deprecated`.\n")
    return 0
if __name__ == "__main__":
    raise SystemExit(main())
