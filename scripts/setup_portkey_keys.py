#!/usr/bin/env python3
"""
Setup script to configure Portkey API keys and virtual keys
This script helps set up the .env file with all necessary keys
"""

import os
import sys
from pathlib import Path
from typing import Dict

# Add project root to path
sys.path.insert(0, str(Path(__file__).parent.parent))


class PortkeySetup:
    """Setup utility for Portkey configuration"""

    # Actual keys to be configured (DO NOT COMMIT WITH REAL KEYS)
    KEYS_TO_CONFIGURE = {
        # Main Portkey Configuration
        "PORTKEY_API_KEY": os.getenv("PORTKEY_API_KEY", ""),
        "PORTKEY_BASE_URL": "https://api.portkey.ai/v1",
        # Virtual Keys for Providers
        "DEEPSEEK_VK": "deepseek-vk-24102f",
        "OPENAI_VK": "openai-vk-190a60",
        "ANTHROPIC_VK": "anthropic-vk-b42804",
        "OPENROUTER_VK": "vkj-openrouter-cc4151",
        "PERPLEXITY_VK": "perplexity-vk-56c172",
        "GROQ_VK": "groq-vk-6b9b52",
        "MISTRAL_VK": "mistral-vk-f92861",
        "XAI_VK": "xai-vk-e65d0f",
        "TOGETHER_VK": "together-ai-670469",
        "COHERE_VK": "cohere-vk-496fa9",
        "GEMINI_VK": "gemini-vk-3d6108",
        "HUGGINGFACE_VK": "huggingface-vk-28240e",
        # Vector Database Virtual Keys
        "MILVUS_VK": "milvus-vk-34fa02",
        "QDRANT_VK": "qdrant-vk-d2b62a",
        # Additional Service Keys
        "TOGETHER_AI_API_KEY": "tgp_v1_HE_uluFh-fELZDmEP9xKZXuSBT4a8EHd6s9CmSe5WWo",
        "WEAVIATE_API_KEY": "VMKjGMQUnXQIDiFOciZZOhr7amBfCHMh7hNf",
        "WEAVIATE_URL": "https://w6bigpoxsrwvq7wlgmmdva.c0.us-west3.gcp.weaviate.cloud",
        "QDRANT_API_KEY": "ccabdaed-b564-4157-8846-b8f227c7f29b|hRnj-WYa5pxZlPuu2S2LmrX2LziBOdChyLP5Hq578N-HIi16EZIshA",
        "QDRANT_URL": "https://a2a5dc3b-bf37-4907-9398-d49f5c6813ed.us-west-2-0.aws.cloud.qdrant.io",
        "MEM0_API_KEY": "m0-migu5eMnfwT41nhTgVHsCnSAifVtOf3WIFz2vmQc",
        "REDIS_HOST": "redis-15014.fcrce172.us-east-1-1.ec2.redns.redis-cloud.com",
        "REDIS_PORT": "15014",
    }

    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.env_file = self.project_root / ".env"
        self.env_template = self.project_root / ".env.template"

    def backup_existing_env(self):
        """Backup existing .env file if it exists"""
        if self.env_file.exists():
            backup_path = self.env_file.with_suffix(".env.backup")
            counter = 1
            while backup_path.exists():
                backup_path = self.env_file.with_suffix(f".env.backup.{counter}")
                counter += 1

            self.env_file.rename(backup_path)
            print(f"‚úÖ Backed up existing .env to: {backup_path}")
            return backup_path
        return None

    def read_existing_env(self) -> Dict[str, str]:
        """Read existing environment variables"""
        existing_vars = {}

        if self.env_file.exists():
            with open(self.env_file) as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith("#") and "=" in line:
                        key, value = line.split("=", 1)
                        existing_vars[key.strip()] = value.strip()

        return existing_vars

    def write_env_file(self, variables: Dict[str, str]):
        """Write environment variables to .env file"""
        content = []

        # Header
        content.append("# ============================================")
        content.append("# PORTKEY CENTRALIZED LLM ROUTING CONFIGURATION")
        content.append("# Generated by setup_portkey_keys.py")
        content.append("# ============================================")
        content.append("")

        # Main Portkey Configuration
        content.append("# Main Portkey Configuration")
        content.append(f"PORTKEY_API_KEY={variables.get('PORTKEY_API_KEY', '')}")
        content.append(
            f"PORTKEY_BASE_URL={variables.get('PORTKEY_BASE_URL', 'https://api.portkey.ai/v1')}"
        )
        content.append("")

        # Provider Virtual Keys
        content.append("# Provider Virtual Keys")
        for key in [
            "DEEPSEEK_VK",
            "OPENAI_VK",
            "ANTHROPIC_VK",
            "OPENROUTER_VK",
            "PERPLEXITY_VK",
            "GROQ_VK",
            "MISTRAL_VK",
            "XAI_VK",
            "TOGETHER_VK",
            "COHERE_VK",
            "GEMINI_VK",
            "HUGGINGFACE_VK",
        ]:
            content.append(f"{key}={variables.get(key, '')}")
        content.append("")

        # Vector Database Configuration
        content.append("# Vector Database Configuration")
        content.append(f"QDRANT_API_KEY={variables.get('QDRANT_API_KEY', '')}")
        content.append(f"QDRANT_URL={variables.get('QDRANT_URL', '')}")
        content.append(f"QDRANT_VK={variables.get('QDRANT_VK', '')}")
        content.append("")

        content.append(f"WEAVIATE_API_KEY={variables.get('WEAVIATE_API_KEY', '')}")
        content.append(f"WEAVIATE_URL={variables.get('WEAVIATE_URL', '')}")
        content.append("")

        content.append(f"MILVUS_VK={variables.get('MILVUS_VK', '')}")
        content.append(f"MILVUS_HOST={variables.get('MILVUS_HOST', 'localhost')}")
        content.append(f"MILVUS_PORT={variables.get('MILVUS_PORT', '19530')}")
        content.append("")

        # Memory & Caching
        content.append("# Memory & Caching Configuration")
        content.append(f"MEM0_API_KEY={variables.get('MEM0_API_KEY', '')}")
        content.append("")

        content.append(f"REDIS_HOST={variables.get('REDIS_HOST', '')}")
        content.append(f"REDIS_PORT={variables.get('REDIS_PORT', '6379')}")
        content.append(f"REDIS_PASSWORD={variables.get('REDIS_PASSWORD', '')}")
        content.append("")

        # Additional Services
        content.append("# Additional Services")
        content.append(
            f"TOGETHER_AI_API_KEY={variables.get('TOGETHER_AI_API_KEY', '')}"
        )
        content.append("")

        # System Configuration
        content.append("# System Configuration")
        content.append(f"MAX_RETRIES={variables.get('MAX_RETRIES', '3')}")
        content.append(f"REQUEST_TIMEOUT={variables.get('REQUEST_TIMEOUT', '60')}")
        content.append(
            f"CONNECTION_TIMEOUT={variables.get('CONNECTION_TIMEOUT', '10')}"
        )
        content.append("")

        content.append(f"CACHE_TTL={variables.get('CACHE_TTL', '3600')}")
        content.append(f"CACHE_ENABLED={variables.get('CACHE_ENABLED', 'true')}")
        content.append("")

        content.append(f"LOG_LEVEL={variables.get('LOG_LEVEL', 'INFO')}")
        content.append(f"ENABLE_METRICS={variables.get('ENABLE_METRICS', 'true')}")
        content.append(f"METRICS_PORT={variables.get('METRICS_PORT', '9090')}")
        content.append("")

        content.append("# Feature Flags")
        content.append(
            f"USE_PORTKEY_ROUTING={variables.get('USE_PORTKEY_ROUTING', 'true')}"
        )
        content.append(f"ENABLE_FALLBACK={variables.get('ENABLE_FALLBACK', 'true')}")
        content.append(
            f"ENABLE_LOAD_BALANCING={variables.get('ENABLE_LOAD_BALANCING', 'true')}"
        )

        # Write to file
        with open(self.env_file, "w") as f:
            f.write("\n".join(content))

        print(f"‚úÖ Environment file written to: {self.env_file}")

    def setup_development_env(self):
        """Setup development environment with actual keys"""
        print("üîß Setting up Portkey configuration...")

        # Backup existing file
        backup_path = self.backup_existing_env()

        # Read existing variables
        existing_vars = self.read_existing_env() if backup_path else {}

        # Merge with new keys
        final_vars = {**existing_vars, **self.KEYS_TO_CONFIGURE}

        # Write new env file
        self.write_env_file(final_vars)

        # Verify critical keys
        critical_keys = ["PORTKEY_API_KEY", "OPENAI_VK", "ANTHROPIC_VK"]
        missing_critical = [k for k in critical_keys if not final_vars.get(k)]

        if missing_critical:
            print(f"‚ö†Ô∏è Warning: Missing critical keys: {', '.join(missing_critical)}")
        else:
            print("‚úÖ All critical keys configured")

        # Print summary
        print("\nüìä Configuration Summary:")
        print(
            f"  - Portkey API Key: {'‚úì' if final_vars.get('PORTKEY_API_KEY') else '‚úó'}"
        )

        vk_count = sum(1 for k in final_vars if k.endswith("_VK") and final_vars[k])
        print(f"  - Virtual Keys: {vk_count} configured")

        print(f"  - Qdrant: {'‚úì' if final_vars.get('QDRANT_API_KEY') else '‚úó'}")
        print(f"  - Weaviate: {'‚úì' if final_vars.get('WEAVIATE_API_KEY') else '‚úó'}")
        print(f"  - Redis: {'‚úì' if final_vars.get('REDIS_HOST') else '‚úó'}")
        print(f"  - Mem0: {'‚úì' if final_vars.get('MEM0_API_KEY') else '‚úó'}")

        print("\n‚úÖ Setup complete!")
        print("\nNext steps:")
        print("1. Review the .env file to ensure all keys are correct")
        print("2. Run: python scripts/test_portkey_integration.py")
        print("3. Check logs for any connection issues")

    def validate_keys(self):
        """Validate that keys are properly formatted"""
        if not self.env_file.exists():
            print("‚ùå No .env file found")
            return False

        from dotenv import load_dotenv

        load_dotenv()

        issues = []

        # Check Portkey API key format
        portkey_key = os.getenv("PORTKEY_API_KEY")
        if not portkey_key or len(portkey_key) < 20:
            issues.append("PORTKEY_API_KEY appears invalid")

        # Check virtual key format
        for key in os.environ:
            if key.endswith("_VK"):
                value = os.getenv(key)
                if value and not (value.startswith("vk") or "vk" in value):
                    issues.append(f"{key} doesn't look like a valid virtual key")

        if issues:
            print("‚ö†Ô∏è Validation issues found:")
            for issue in issues:
                print(f"  - {issue}")
            return False
        else:
            print("‚úÖ All keys appear valid")
            return True


def main():
    """Main setup execution"""
    setup = PortkeySetup()

    print("=" * 60)
    print("üöÄ PORTKEY CONFIGURATION SETUP")
    print("=" * 60)

    # Check if env file exists
    if setup.env_file.exists():
        response = input("\n‚ö†Ô∏è .env file already exists. Overwrite? (y/n): ")
        if response.lower() != "y":
            print("Setup cancelled")
            return

    # Run setup
    setup.setup_development_env()

    # Validate
    print("\nüîç Validating configuration...")
    setup.validate_keys()

    print("\n‚ú® Setup complete! You can now test the integration.")


if __name__ == "__main__":
    main()
